<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OrderCloud Documentation Content - Integration Services</title><link href="https://ordercloud-api.github.io/docs/" rel="alternate"></link><link href="https://ordercloud-api.github.io/docs/feeds/integration-services.atom.xml" rel="self"></link><id>https://ordercloud-api.github.io/docs/</id><updated>2018-03-19T15:32:44-05:00</updated><entry><title>Authorizenet: Authorize And Capture Transaction</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-authorize-and-capture-transaction.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-authorize-and-capture-transaction.html</id><summary type="html">&lt;h2&gt;__Authorize and Capture Transaction Overview&lt;/h2&gt;
&lt;p&gt;Authorizing and Capturing a credit card transaction is one of the most
involved methods included in this integration. This method will create a new
Customer Payment Profile on Authorize.Net and credit card on OrderCloud.io if
one does not already exist, authorize and capture …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Authorize and Capture Transaction Overview&lt;/h2&gt;
&lt;p&gt;Authorizing and Capturing a credit card transaction is one of the most
involved methods included in this integration. This method will create a new
Customer Payment Profile on Authorize.Net and credit card on OrderCloud.io if
one does not already exist, authorize and capture a payment transaction on
Authorize.Net, create a payment on OrderCloud.io tied to the authenticated
user’s current Order (if a payment already exists, simply pass the ID in
&lt;code&gt;PaymentID&lt;/code&gt;), and also create a transaction tied to that payment.&lt;/p&gt;
&lt;p&gt;If the transaction authorization and capture are successful, but there is an
error while creating the payment or transaction on OrderCloud.io, the
Authorize.Net transaction will be voided.&lt;/p&gt;
&lt;h2&gt;__Authorize and Capture Transaction Request&lt;/h2&gt;
&lt;p&gt;This method requires either CardDetails.CreditCardID (for a previously created
card) or CardDetails.CardNumber and CardDetails.ExpirationDate (to create a
new card).&lt;/p&gt;
&lt;h2&gt;__Authorize and Capture Transaction Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the authorization and capture process, the Authorize.Net payment
transaction will be created first, followed by the payment and transaction on
OrderCloud.io. In the case that the OrderCloud.io steps fail, the transaction
will be voided automatically on Authorize.Net.&lt;/p&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthCaptureTransaction.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to authorize and capture a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthCaptureTransaction.AmountRequired

&lt;/td&gt;  
&lt;td&gt;

Amount is required to authorize and capture a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthCaptureTransaction.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to authorize and capture a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthCaptureTransaction.CardDetailsRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CreditCardID OR CardDetails.CardNumber and
CardDetails.ExpirationDate are required to authorize and capture a credit
card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;Authorize.Net Error Response&lt;/h3&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

responseCode

&lt;/th&gt;  
&lt;th&gt;

errorCode

&lt;/th&gt;  
&lt;th&gt;

errorText

&lt;/th&gt;  
&lt;th&gt;

resultCode

&lt;/th&gt;  
&lt;th&gt;

message.code

&lt;/th&gt;  
&lt;th&gt;

message.text

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

5

&lt;/td&gt;  
&lt;td&gt;

A valid amount is required.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

6

&lt;/td&gt;  
&lt;td&gt;

The credit card number is invalid.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

7

&lt;/td&gt;  
&lt;td&gt;

Credit card expiration date is invalid.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

8

&lt;/td&gt;  
&lt;td&gt;

The credit card has expired.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.CreditCardID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;OrderID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Authorize Only Transaction</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-authorize-only-transaction.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-authorize-only-transaction.html</id><summary type="html">&lt;h2&gt;__Authorize Only Transaction Overview&lt;/h2&gt;
&lt;p&gt;Though a payment is not actually being captured, the Authorize Only
transaction method involves just as many integration calls as Authorizing and
Capturing a credit card transaction. This method will create a new Customer
Payment Profile on Authorize.Net and credit card on OrderCloud.io if …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Authorize Only Transaction Overview&lt;/h2&gt;
&lt;p&gt;Though a payment is not actually being captured, the Authorize Only
transaction method involves just as many integration calls as Authorizing and
Capturing a credit card transaction. This method will create a new Customer
Payment Profile on Authorize.Net and credit card on OrderCloud.io if one does
not already exist, authorize a payment transaction on Authorize.Net, create a
payment on OrderCloud.io tied to the authenticated user’s current Order (if a
payment already exists, simply pass the ID in &lt;code&gt;PaymentID&lt;/code&gt;), and also create a
transaction tied to that payment. The main differences are that the payment
will not be captured on Authorize.Net and the transaction on OrderCloud.io
will only reference that authorization.&lt;/p&gt;
&lt;p&gt;If the authorization transaction is successful, but there is an error while
creating the payment or transaction on OrderCloud.io, the Authorize.Net
transaction will be voided.&lt;/p&gt;
&lt;h2&gt;__Authorize Only Request&lt;/h2&gt;
&lt;p&gt;This method requires either CardDetails.CreditCardID (for a previously created
card) or CardDetails.CardNumber and CardDetails.ExpirationDate (to create a
new card).&lt;/p&gt;
&lt;h2&gt;__Authorize Only Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the authorization only process, the Authorize.Net payment authorization
transaction will be created first, followed by the payment and transaction on
OrderCloud.io. In the case that the OrderCloud.io steps fail, the transaction
will be voided automatically on Authorize.Net.&lt;/p&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthOnlyTransaction.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to authorize a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthOnlyTransaction.AmountRequired

&lt;/td&gt;  
&lt;td&gt;

Amount is required to authorize a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthOnlyTransaction.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to authorize a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

AuthOnlyTransaction.CardDetailsRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CreditCardID OR CardDetails.CardNumber and
CardDetails.ExpirationDate are required to authorize a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;Authorize.Net Error Response&lt;/h3&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

responseCode

&lt;/th&gt;  
&lt;th&gt;

errorCode

&lt;/th&gt;  
&lt;th&gt;

errorText

&lt;/th&gt;  
&lt;th&gt;

resultCode

&lt;/th&gt;  
&lt;th&gt;

message.code

&lt;/th&gt;  
&lt;th&gt;

message.text

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

5

&lt;/td&gt;  
&lt;td&gt;

A valid amount is required.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

6

&lt;/td&gt;  
&lt;td&gt;

The credit card number is invalid.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

7

&lt;/td&gt;  
&lt;td&gt;

Credit card expiration date is invalid.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

3

&lt;/td&gt;  
&lt;td&gt;

8

&lt;/td&gt;  
&lt;td&gt;

The credit card has expired.

&lt;/td&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The transaction was unsuccessful.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.CreditCardID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;OrderID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Create Credit Card</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-create-credit-card.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-create-credit-card.html</id><summary type="html">&lt;h2&gt;__Create Credit Card Overview&lt;/h2&gt;
&lt;p&gt;When a customer within your buyer application creates a credit card, the
integration endpoint can be called in order to create that card within
OrderCloud.io as well as Authorize.Net. The card will created as a personal
card by default. However, passing &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;Shared …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Create Credit Card Overview&lt;/h2&gt;
&lt;p&gt;When a customer within your buyer application creates a credit card, the
integration endpoint can be called in order to create that card within
OrderCloud.io as well as Authorize.Net. The card will created as a personal
card by default. However, passing &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;Shared&lt;/code&gt; assign the card to the
entire Buyer Organization provided in the &lt;code&gt;BuyerID&lt;/code&gt;. This endpoint will create
a Customer Profile within Authorize.Net if one does not already exist
(Authorize.Net Customer Profile ID will be saved as xp.AuthorizeNetProfileID
on the User), create a Customer Payment Profile within Authorize.Net that
securely stores the tokenized data for the card, and finally create and assign
the card on OrderCloud.io to the authenticate user.&lt;/p&gt;
&lt;h2&gt;__Create Credit Card Request&lt;/h2&gt;
&lt;h2&gt;__Create Credit Card Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the credit card create process, the Authorize.Net Customer Profile and
Customer Payment Profile are created (if necessary) first, followed by the
creation of the card on OrderCloud.io. Therefore, if any errors occur, they
will occur in that order. Errors will return the exact response directly from
the Authorize.Net or OrderCloud.io endpoint that failed. However, if any
required fields are missing, a 400 error will be returned before any of the
creation process is executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

CreateCreditCard.CardNumberRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CardNumber is required to create a new credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

CreateCreditCard.ExpirationDateRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.ExpirationDate is required to create a new credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;Authorize.Net Error Response&lt;/h3&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

resultCode

&lt;/th&gt;  
&lt;th&gt;

message.code

&lt;/th&gt;  
&lt;th&gt;

message.text

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00013

&lt;/td&gt;  
&lt;td&gt;

Card Number is invalid.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00013

&lt;/td&gt;  
&lt;td&gt;

Expiration Date is invalid.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The credit card has expired.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Delete Credit Card</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-delete-credit-card.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-delete-credit-card.html</id><summary type="html">&lt;h2&gt;__Delete Credit Card Overview&lt;/h2&gt;
&lt;p&gt;When a customer within your buyer application deletes a credit card, the
integration endpoint can be called in order to delete that card on
OrderCloud.io as well as Authorize.Net. The Customer Payment Profile will be
removed on Authorize.Net, followed by the card being …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Delete Credit Card Overview&lt;/h2&gt;
&lt;p&gt;When a customer within your buyer application deletes a credit card, the
integration endpoint can be called in order to delete that card on
OrderCloud.io as well as Authorize.Net. The Customer Payment Profile will be
removed on Authorize.Net, followed by the card being deleted on OrderCloud.io.
If either call fails, the response from that particular call will be returned.
Otherwise, the response will simply be a 204 No Content. If the card is
shared, meaning &lt;code&gt;Shared&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt; when the card was created, &lt;code&gt;Shared&lt;/code&gt;
must be passed as &lt;code&gt;true&lt;/code&gt; when deleting.&lt;/p&gt;
&lt;h2&gt;__Delete Credit Card Request&lt;/h2&gt;
&lt;h2&gt;__Delete Credit Card Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the credit card delete process, the Authorize.Net Customer Payment
Profile will first be deleted. Next, the card will be deleted on
OrderCloud.io.&lt;/p&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

DeleteCreditCard.CreditCardIDRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CreditCardID is required to delete a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.CreditCardID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Prior Authorization Capture Transaction</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-prior-authorization-capture-transaction.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-prior-authorization-capture-transaction.html</id><summary type="html">&lt;h2&gt;__Prior Authorization Capture Transaction Overview&lt;/h2&gt;
&lt;p&gt;In the case that Authorize Only was previously used for a payment, Prior
Authorization Capture Transaction can be used to actually capture the payment.
This method will first capture the payment on Authorize.Net, then create an
additional transaction on the previously created payment on …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Prior Authorization Capture Transaction Overview&lt;/h2&gt;
&lt;p&gt;In the case that Authorize Only was previously used for a payment, Prior
Authorization Capture Transaction can be used to actually capture the payment.
This method will first capture the payment on Authorize.Net, then create an
additional transaction on the previously created payment on OrderCloud.io.&lt;/p&gt;
&lt;p&gt;If the capture transaction is successful, but there is an error while creating
the transaction on OrderCloud.io, the Authorize.Net transaction will be
voided.&lt;/p&gt;
&lt;h2&gt;__Prior Authorization Capture Transaction Request&lt;/h2&gt;
&lt;h2&gt;__Prior Authorization Capture Transaction Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the prior authorization capture process, the Authorize.Net payment
authorization will be captured, followed by the creation of the transaction on
OrderCloud.io. In the case that the OrderCloud.io step fails, the transaction
will be voided automatically on Authorize.Net.&lt;/p&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

PriorAuthCaptureTransaction.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to capture a prior authorization.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

PriorAuthCaptureTransaction.PaymentIDRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.PaymentID is required to capture a prior authorization.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

PriorAuthCaptureTransaction.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to capture a prior authorization.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.PaymentID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;OrderID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Refund Transaction</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-refund-transaction.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-refund-transaction.html</id><summary type="html">&lt;h2&gt;__Refund Transaction Overview&lt;/h2&gt;
&lt;p&gt;In the case that a refund is required for a previously captured transaction,
use the Refund Transaction method. This method will refund the transaction on
Authorize.Net for either an existing card or dynamically to the card details
provided then create an additional transaction on the existing …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Refund Transaction Overview&lt;/h2&gt;
&lt;p&gt;In the case that a refund is required for a previously captured transaction,
use the Refund Transaction method. This method will refund the transaction on
Authorize.Net for either an existing card or dynamically to the card details
provided then create an additional transaction on the existing payment on
OrderCloud.io.&lt;/p&gt;
&lt;p&gt;If the refund transaction is successful, but there is an error while creating
the transaction on OrderCloud.io, the Authorize.Net transaction will be
voided.&lt;/p&gt;
&lt;h2&gt;__Refund Transaction Request&lt;/h2&gt;
&lt;p&gt;This method requires either CardDetails.CreditCardID (for a previously created
card) or CardDetails.CardNumber and CardDetails.ExpirationDate (to create a
new card). It also requires CardDetails.PaymentID referencing the previously
created payment being refunded.&lt;/p&gt;
&lt;h2&gt;__Refund Transaction Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the refund process, the Authorize.Net refund transaction will be
created first, followed by the transaction on OrderCloud.io. In the case that
the OrderCloud.io step fails, the refund will be voided automatically on
Authorize.Net.&lt;/p&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

RefundTransaction.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to refund a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

RefundTransaction.PaymentIDRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.PaymentID is required to refund a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

RefundTransaction.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to refund a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

RefundTransaction.CardDetailsRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CreditCardID OR CardDetails.CardNumber and
CardDetails.ExpirationDate are required to refund a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.CreditCardID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.PaymentID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;OrderID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Update Credit Card</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-update-credit-card.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-update-credit-card.html</id><summary type="html">&lt;h2&gt;__Update Credit Card Overview&lt;/h2&gt;
&lt;p&gt;When a customer within your buyer application updates a credit card, the
integration endpoint can be called in order to update that card on
OrderCloud.io as well as Authorize.Net. The Customer Payment Profile will be
updated on Authorize.Net, followed by the card being …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Update Credit Card Overview&lt;/h2&gt;
&lt;p&gt;When a customer within your buyer application updates a credit card, the
integration endpoint can be called in order to update that card on
OrderCloud.io as well as Authorize.Net. The Customer Payment Profile will be
updated on Authorize.Net, followed by the card being patched on OrderCloud.io.
If either step fails, all changes will be reverted in order to keep each
system in sync. If the card is shared, meaning &lt;code&gt;Shared&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt; when
the card was created, &lt;code&gt;Shared&lt;/code&gt; must be passed as &lt;code&gt;true&lt;/code&gt; when updating.&lt;/p&gt;
&lt;h2&gt;__Update Credit Card Request&lt;/h2&gt;
&lt;h2&gt;__Update Credit Card Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;During the credit card update process, the Authorize.Net Customer Payment
Profile will first be updated. Next, the card will be updated on
OrderCloud.io. In the case that either step fails, the card data will be
reverted in both locations, ensuring the data is accurate in each system.&lt;/p&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

UpdateCreditCard.CreditCardIDRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CreditCardID is required to update a credit card.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;Authorize.Net Error Response&lt;/h3&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

resultCode

&lt;/th&gt;  
&lt;th&gt;

message.code

&lt;/th&gt;  
&lt;th&gt;

message.text

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00013

&lt;/td&gt;  
&lt;td&gt;

Card Number is invalid.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00013

&lt;/td&gt;  
&lt;td&gt;

Expiration Date is invalid.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

Error

&lt;/td&gt;  
&lt;td&gt;

E00027

&lt;/td&gt;  
&lt;td&gt;

The credit card has expired.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.CreditCardID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Authorizenet: Void Transaction</title><link href="https://ordercloud-api.github.io/docs/integration-services/authorizenet-void-transaction.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/authorizenet-void-transaction.html</id><summary type="html">&lt;h2&gt;__Void Transaction Overview&lt;/h2&gt;
&lt;p&gt;Though this method is used most commonly by other methods when certain actions
fail, it can also be called directly through the integration. This method will
void a previous transaction on Authorize.Net, then create a transaction tied
to the original payment on OrderCloud.io.&lt;/p&gt;
&lt;h2&gt;__Void Transaction …&lt;/h2&gt;</summary><content type="html">&lt;h2&gt;__Void Transaction Overview&lt;/h2&gt;
&lt;p&gt;Though this method is used most commonly by other methods when certain actions
fail, it can also be called directly through the integration. This method will
void a previous transaction on Authorize.Net, then create a transaction tied
to the original payment on OrderCloud.io.&lt;/p&gt;
&lt;h2&gt;__Void Transaction Request&lt;/h2&gt;
&lt;p&gt;This method requires either CardDetails.CreditCardID (for a previously created
card) or CardDetails.CardNumber and CardDetails.ExpirationDate (to create a
new card). It also requires CardDetails.PaymentID referencing the previously
created payment being voided.&lt;/p&gt;
&lt;h2&gt;__Void Transaction Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;Errors will return the exact response directly from the Authorize.Net or
OrderCloud.io endpoint that failed. However, if any required fields are
missing, a 400 error will be returned before any of the update process is
executed.&lt;/p&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request, the following
response will be returned containing a unique ErrorCode and Message, as well
as the request body sent during the call. The possible ErrorCodes and Messages
are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

VoidTransaction.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to void a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

VoidTransaction.PaymentIDRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.PaymentID or refTransId (optional) is required to void a
transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

VoidTransaction.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to void a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

VoidTransaction.CardDetailsRequired

&lt;/td&gt;  
&lt;td&gt;

CardDetails.CreditCardID OR CardDetails.CardNumber and
CardDetails.ExpirationDate are required to void a transaction.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;OrderCloud.io Error Response&lt;/h3&gt;
&lt;p&gt;If an incorrect &lt;code&gt;BuyerID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.CreditCardID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;CardDetails.PaymentID&lt;/code&gt; was provided:&lt;/p&gt;
&lt;p&gt;If an incorrect &lt;code&gt;OrderID&lt;/code&gt; was provided:&lt;/p&gt;</content><category term="authorizenet"></category></entry><entry><title>Shippingrates: Configuring Catalog</title><link href="https://ordercloud-api.github.io/docs/integration-services/shippingrates-configuring-catalog.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/shippingrates-configuring-catalog.html</id><summary type="html">&lt;h2&gt;__Configuring Catalog Overview&lt;/h2&gt;
&lt;p&gt;In order to be considered when estimating shipping rates, products and their
price schedules will need a few things set up first.&lt;/p&gt;
&lt;h2&gt;__ApplyShipping&lt;/h2&gt;
&lt;p&gt;First, &lt;code&gt;ApplyShipping&lt;/code&gt; will need to be set to true on the price schedule
assigned to the product. Any Line Items containing Products without this …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Configuring Catalog Overview&lt;/h2&gt;
&lt;p&gt;In order to be considered when estimating shipping rates, products and their
price schedules will need a few things set up first.&lt;/p&gt;
&lt;h2&gt;__ApplyShipping&lt;/h2&gt;
&lt;p&gt;First, &lt;code&gt;ApplyShipping&lt;/code&gt; will need to be set to true on the price schedule
assigned to the product. Any Line Items containing Products without this value
set to true on its Price Schedule will be ignored when calculating shipping
rates. Here's a sample Price Schedule with this configuration set:&lt;/p&gt;
&lt;h2&gt;__ShipWeight&lt;/h2&gt;
&lt;p&gt;Next, a &lt;code&gt;ShipWeight&lt;/code&gt; (in lbs.) should to be set on the Product being ordered
to provide accurate shipping rates. If a value is not set, the Product will
still be included in the calculation. However, a weight of &lt;code&gt;0&lt;/code&gt; will be used
when calculating rates, resulting in inaccurate rates.&lt;/p&gt;
&lt;h2&gt;__ShipFromAddressID&lt;/h2&gt;
&lt;p&gt;Next, a &lt;code&gt;ShipFromAddressID&lt;/code&gt; needs to be set on the Product being ordered to be
considered when estimating shipping rates. The value for this field should be
a previously created Admin Address ID. Each Product should have the
&lt;code&gt;ShipFromAddressID&lt;/code&gt; set for the location it is being shipped from. Products
being shipped from separate locations will be considered a separate shipment
within OrderCloud.io, meaning Line Items will be grouped by these addresses
(as well as the item's Shipping Address) when calculating rates. Here's a
sample Admin Address and a Product containing that Admin Address' ID, as well
as a &lt;code&gt;ShipWeight&lt;/code&gt;:&lt;/p&gt;</content><category term="shippingrates"></category></entry><entry><title>Shippingrates: Configuring Integration</title><link href="https://ordercloud-api.github.io/docs/integration-services/shippingrates-configuring-integration.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/shippingrates-configuring-integration.html</id><summary type="html">&lt;h2&gt;__Creating Configuration&lt;/h2&gt;
&lt;p&gt;To configure your integration, navigate to the Dashboard Dashboard
Integrations page within OrderCloud.io and select Shipping Rates.&lt;/p&gt;
&lt;h3&gt;Selecting Carriers&lt;/h3&gt;
&lt;p&gt;First, select which carriers you would like shipping rate estimates returned
from. Current options include USPS and UPS. If UPS or FedEx are selected, you
have the option …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Creating Configuration&lt;/h2&gt;
&lt;p&gt;To configure your integration, navigate to the Dashboard Dashboard
Integrations page within OrderCloud.io and select Shipping Rates.&lt;/p&gt;
&lt;h3&gt;Selecting Carriers&lt;/h3&gt;
&lt;p&gt;First, select which carriers you would like shipping rate estimates returned
from. Current options include USPS and UPS. If UPS or FedEx are selected, you
have the option to enter your account credentials in order to receive shipping
rates specific to your account.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/integrations/shippingrates/shippingrates-
configuration-carriers.png)&lt;/p&gt;
&lt;h3&gt;Rate Adjustments&lt;/h3&gt;
&lt;p&gt;Next, shipping rate estimates can be configured to be automatically increased
or decreased based on a percentage or flat rate. These adjustments can be made
at a global level (all carriers) or at the carrier level.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/integrations/shippingrates/shippingrates-
configuration-rate-adjustment.png)&lt;/p&gt;
&lt;h3&gt;Manual Shippers&lt;/h3&gt;
&lt;p&gt;Finally, manual shippers can be configured to be returned for both &lt;em&gt;GetRates&lt;/em&gt;
and &lt;em&gt;GetLineItemRates&lt;/em&gt; methods. Manual shippers consist of a Name and a flat
rate Price. This Price will not be adjusted using the Rate Adjustments
explained above, so enter the exact value you would like to charge the user
for that specific shipper. You can configure each manual shipper to always be
returned or only be returned when no rate estimates are obtained from your
selected carrier(s).&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/integrations/shippingrates/shippingrates-
configuration-manual-shippers.png)&lt;/p&gt;
&lt;h2&gt;__Assigning Configuration&lt;/h2&gt;
&lt;p&gt;After your configuration has been created, navigate to a Buyer Application
that will be using the integration. Select the Integrations tab, then click
Add. Since you previously created the Shipping Rates configuration, it should
be available within the modal. Simply click Enable and your Buyer Application
will be ready to use the Shipping Rates integration.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/integrations/shippingrates/shippingrates-
assignment.png)&lt;/p&gt;</content><category term="shippingrates"></category></entry><entry><title>Shippingrates: Get Line Item Rates</title><link href="https://ordercloud-api.github.io/docs/integration-services/shippingrates-get-line-item-rates.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/shippingrates-get-line-item-rates.html</id><summary type="html">&lt;h2&gt;__Get Line Item Rates Overview&lt;/h2&gt;
&lt;p&gt;The next method available within the OrderCloud.io Shipping Rates integration
is &lt;em&gt;GetLineItemRates&lt;/em&gt;. This method will obtain shipping rate estimates from
the carriers selected in your integration configuration for each individual
Line Item in your order based on the item’s product weight, but regardless …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Get Line Item Rates Overview&lt;/h2&gt;
&lt;p&gt;The next method available within the OrderCloud.io Shipping Rates integration
is &lt;em&gt;GetLineItemRates&lt;/em&gt;. This method will obtain shipping rate estimates from
the carriers selected in your integration configuration for each individual
Line Item in your order based on the item’s product weight, but regardless of
the item’s &lt;code&gt;ShippingAddress&lt;/code&gt; and &lt;code&gt;ShipFromAddressID&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned in the Catalog Configuration, Line Items will not be included in
the shipping rate calculation for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No &lt;code&gt;ShippingAddress&lt;/code&gt; is set on the Line Item&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;ShipFromAddressID&lt;/code&gt; is set on the Product&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplyShipping&lt;/code&gt; is not set to true on the Product’s Price Schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, if a &lt;code&gt;ShipWeight&lt;/code&gt; (in lbs.) is not set on a Product, a weight of &lt;code&gt;0&lt;/code&gt;
will be used when calculating rates, resulting in an inaccurate estimate.&lt;/p&gt;
&lt;h2&gt;__Get Line Item Rates Request&lt;/h2&gt;
&lt;h2&gt;__Get Line Item Rates Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request or there are
any issues with your Order, the following response will be returned containing
a unique ErrorCode and Message, as well as the request body sent during the
call. The possible ErrorCodes and Messages are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.LineItemsRequired

&lt;/td&gt;  
&lt;td&gt;

At least one line item is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="shippingrates"></category></entry><entry><title>Shippingrates: Get Rates</title><link href="https://ordercloud-api.github.io/docs/integration-services/shippingrates-get-rates.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/shippingrates-get-rates.html</id><summary type="html">&lt;h2&gt;__Get Rates Overview&lt;/h2&gt;
&lt;p&gt;The first method available within the OrderCloud.io Shipping Rates integration
is &lt;em&gt;GetRates&lt;/em&gt;. This method will group together Line Items on an Order based on
the Line Items' &lt;code&gt;ShippingAddress&lt;/code&gt; and the Line Item Products'
&lt;code&gt;ShipFromAddressID&lt;/code&gt;, calculate the total weight of each shipment based on the
included Products' …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Get Rates Overview&lt;/h2&gt;
&lt;p&gt;The first method available within the OrderCloud.io Shipping Rates integration
is &lt;em&gt;GetRates&lt;/em&gt;. This method will group together Line Items on an Order based on
the Line Items' &lt;code&gt;ShippingAddress&lt;/code&gt; and the Line Item Products'
&lt;code&gt;ShipFromAddressID&lt;/code&gt;, calculate the total weight of each shipment based on the
included Products' &lt;code&gt;ShipWeight&lt;/code&gt;, and obtain shipping rate estimates from the
carriers selected in your integration configuration.&lt;/p&gt;
&lt;p&gt;As mentioned in the Catalog Configuration, Line Items will not be included in
the shipping rate calculation for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No &lt;code&gt;ShippingAddress&lt;/code&gt; is set on the Line Item&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;ShipFromAddressID&lt;/code&gt; is set on the Product&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplyShipping&lt;/code&gt; is not set to true on the Product’s Price Schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, if a &lt;code&gt;ShipWeight&lt;/code&gt; (in lbs.) is not set on a Product, a weight of &lt;code&gt;0&lt;/code&gt;
will be used when calculating rates, resulting in an inaccurate estimate.&lt;/p&gt;
&lt;h2&gt;__Get Rates Request&lt;/h2&gt;
&lt;h2&gt;__Get Rates Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request or there are
any issues with your Order, the following response will be returned containing
a unique ErrorCode and Message, as well as the request body sent during the
call. The possible ErrorCodes and Messages are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.LineItemsRequired

&lt;/td&gt;  
&lt;td&gt;

At least one line item is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="shippingrates"></category></entry><entry><title>Shippingrates: Overview</title><link href="https://ordercloud-api.github.io/docs/integration-services/shippingrates-overview.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/shippingrates-overview.html</id><summary type="html">&lt;h2&gt;__Shipping Rates Overview&lt;/h2&gt;
&lt;p&gt;OrderCloud.io offers the ability to provide weight-based shipping rate
estimates within your storefronts based on the commercial shipping rates.
Supported carriers within this integration currently include USPS, UPS, and
FedEx.&lt;/p&gt;
&lt;p&gt;Once configured, the OrderCloud.io Shipping Rates integration offers three
methods: &lt;em&gt;GetRates&lt;/em&gt; , &lt;em&gt;GetLineItemRates&lt;/em&gt; , and &lt;em&gt;SetShippingCost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;GetRates …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Shipping Rates Overview&lt;/h2&gt;
&lt;p&gt;OrderCloud.io offers the ability to provide weight-based shipping rate
estimates within your storefronts based on the commercial shipping rates.
Supported carriers within this integration currently include USPS, UPS, and
FedEx.&lt;/p&gt;
&lt;p&gt;Once configured, the OrderCloud.io Shipping Rates integration offers three
methods: &lt;em&gt;GetRates&lt;/em&gt; , &lt;em&gt;GetLineItemRates&lt;/em&gt; , and &lt;em&gt;SetShippingCost&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;GetRates will automatically separate the Order's Line Items into shipments
based on their &lt;code&gt;ShippingAddress&lt;/code&gt; and the Line Item Product's
&lt;code&gt;ShipFromAddress&lt;/code&gt;. Rates will be returned based on these determined shipments.&lt;/p&gt;
&lt;p&gt;GetLineItemRates will obtain shipping rates for each Line Item individually,
regardless of the item’s &lt;code&gt;ShippingAddress&lt;/code&gt; and the Line Item Product’s
&lt;code&gt;ShipFromAddress&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;SetShippingCost simply allows your application to set an Order's
&lt;code&gt;ShippingCost&lt;/code&gt; value once the user has selected their desired shipper(s) for
their Order.&lt;/p&gt;
&lt;p&gt;Additional configuration options include rate adjustments and manual shippers.
Rate adjustments allows you to automatically increase or decrease the
estimated shipping rates by a percentage or flat rate. This can be configured
at a global or carrier level.&lt;/p&gt;
&lt;p&gt;Manual shippers allows you to configure shipper options with a Name and flat
rate Price. This price will not be adjusted using the rate adjustments
described above. Manual shippers can be configured to always be returned or to
only be returned when no shipping rate estimates are returned. This may be
caused by a determined shipment with a weight greater than 150 lbs., invalid
addresses, or simply because the carrier's web services are not functioning
properly.&lt;/p&gt;
&lt;p&gt;OrderCloud.io's Shipping Rates integration not only requires configuration for
the integration endpoint itself, but for the products that will be included
for shipping rate estimates as well. These topics will be covered in the
following sections.&lt;/p&gt;</content><category term="shippingrates"></category></entry><entry><title>Shippingrates: Set Shipping Cost</title><link href="https://ordercloud-api.github.io/docs/integration-services/shippingrates-set-shipping-cost.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/integration-services/shippingrates-set-shipping-cost.html</id><summary type="html">&lt;h2&gt;__Set Shipping Cost Overview&lt;/h2&gt;
&lt;p&gt;Once a user selects their desired shipper(s) for their order, the
&lt;code&gt;ShippingCost&lt;/code&gt; on the Order can be set via the &lt;em&gt;SetShippingCost&lt;/em&gt; method. This
method will patch the Order with the provided &lt;code&gt;ShippingCost&lt;/code&gt; value and return
the updated Order.&lt;/p&gt;
&lt;h2&gt;__Set Shipping Cost Request&lt;/h2&gt;
&lt;h2&gt;__Set Shipping Cost …&lt;/h2&gt;</summary><content type="html">&lt;h2&gt;__Set Shipping Cost Overview&lt;/h2&gt;
&lt;p&gt;Once a user selects their desired shipper(s) for their order, the
&lt;code&gt;ShippingCost&lt;/code&gt; on the Order can be set via the &lt;em&gt;SetShippingCost&lt;/em&gt; method. This
method will patch the Order with the provided &lt;code&gt;ShippingCost&lt;/code&gt; value and return
the updated Order.&lt;/p&gt;
&lt;h2&gt;__Set Shipping Cost Request&lt;/h2&gt;
&lt;h2&gt;__Set Shipping Cost Response&lt;/h2&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;h3&gt;Validation Response&lt;/h3&gt;
&lt;p&gt;In the case that a required field is missing from your request or there are
any issues with your Order, the following response will be returned containing
a unique ErrorCode and Message, as well as the request body sent during the
call. The possible ErrorCodes and Messages are listed below.  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

ErrorCode

&lt;/th&gt;  
&lt;th&gt;

Message

&lt;/th&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.BuyerIDRequired

&lt;/td&gt;  
&lt;td&gt;

BuyerID is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

ShippingRatesValidation.OrderIDRequired

&lt;/td&gt;  
&lt;td&gt;

OrderID is required to get shipping rates.

&lt;/td&gt;  
&lt;td&gt;

400

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="shippingrates"></category></entry></feed>