<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OrderCloud Documentation</title><link href="https://ordercloud-api.github.io/docs/" rel="alternate"></link><link href="https://ordercloud-api.github.io/docs/feeds/platform-guides/authentication.atom.xml" rel="self"></link><id>https://ordercloud-api.github.io/docs/</id><updated>2018-03-19T15:32:44-05:00</updated><entry><title>Anonymous Shopping</title><link href="https://ordercloud-api.github.io/docs/platform-guides/authentication/anonymous-shopping.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/authentication/anonymous-shopping.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Anonymous Shopping, or Guest Checkout, is when a user is enabled to browse a
catalog of products and/or checkout without registering themselves.
Accomplishing this requires OrderCloud.io developers to pull together a lot of
platform knowledge. We'll summarize that information here.&lt;/p&gt;
&lt;h2&gt;Configuring the Application&lt;/h2&gt;
&lt;p&gt;An anonymous buyer experience …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Anonymous Shopping, or Guest Checkout, is when a user is enabled to browse a
catalog of products and/or checkout without registering themselves.
Accomplishing this requires OrderCloud.io developers to pull together a lot of
platform knowledge. We'll summarize that information here.&lt;/p&gt;
&lt;h2&gt;Configuring the Application&lt;/h2&gt;
&lt;p&gt;An anonymous buyer experience must work within a given buyer user perspective
- otherwise OrderCloud.io has no context for determining data the anonymous
user has access to, like product and pricing information. Therefore, you will
need an active buyer user before we can proceed.&lt;/p&gt;
&lt;p&gt;Once you've done that, navigate to the Dashboard and click on the &lt;strong&gt;Buyer
Organizations&lt;/strong&gt; tab from the left hand nav and select your buyer organization
by clicking on the name. From there click on the application associated with
your Buyer Organization.&lt;/p&gt;
&lt;p&gt;Next, we will add an &lt;strong&gt;Anonymous Template User&lt;/strong&gt;. This will be the user that
all anonymous users will inherit security and assignments from.&lt;/p&gt;
&lt;p&gt;![Anonymous-Template-User]({filename}/images/docs-guides/authentication/anonymous-
template-user.jpg)&lt;/p&gt;
&lt;h2&gt;Authenticating Anonymous Users&lt;/h2&gt;
&lt;p&gt;Once your application is set up with a template user, we're ready to
authenticate anonymously. Using the Client Credentials grant-type and only a
client_id, make a request to the OrderCloud.io OAuth server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;scope=ProductReader CategoryReader MeAddressAdmin MeCreditCardAdmin&amp;amp;grant_type=client_credentials
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will receive a standard OAuth response that contains an access_token you
can use for the duration of the anonymous shopping experience.&lt;/p&gt;
&lt;p&gt;Anonymous access_tokens have a fixed duration of &lt;strong&gt;1 week&lt;/strong&gt; , access token
duration has no affect on anonymous users. Refresh tokens &lt;strong&gt;are not
available&lt;/strong&gt; to anonymous users.&lt;/p&gt;
&lt;p&gt;It is important to note that while it is possible to fully submit an order
using this token, there isn't a secure way to let the anonymous user view
historical order data. If this is required for your project, you should
consider profiling your users at some point before submitting an order.&lt;/p&gt;
&lt;h2&gt;Profiling Anonymous Users&lt;/h2&gt;
&lt;p&gt;Prompting your anonymous shoppers to profile themselves before checking out
ensures that historical order data can be captured so the user can view it
when they return to your site. When you choose to profile users doesn't
matter, it can happen before or after they create an order. Order information
created during the anonymous access_token's life-cycle will transfer to the
newly profiled user automatically.&lt;/p&gt;
&lt;p&gt;The request is relatively simple: provide the anonymous access_token for the
&lt;code&gt;tempUserToken&lt;/code&gt; and the request body should contain the profile information
filled out by the anonymous user:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://api.ordercloud.io/v1/me/register HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json


{
  "ID": "NewUserName",
  "Username": "MyUserName",
  "FirstName": "John",
  "LastName": "Doe",
  "Email": "user@email.com",
  "Phone": "555-555-5555",
  "TermsAccepted": true,
  "Active": true,
  "xp": null
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the OAuth 2.0 Response, you will receive an access_token after
profiling the user. At this point, remove the anonymous access_token and
continue forward with the profiled user's access_token.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Developer Access</title><link href="https://ordercloud-api.github.io/docs/platform-guides/authentication/developer-access.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/authentication/developer-access.html</id><summary type="html">&lt;h2&gt;__Developer Access&lt;/h2&gt;
&lt;p&gt;In order to make it easier for developers to get in and start testing
applications we made a unique role called &lt;code&gt;DevCenterImpersonate&lt;/code&gt;. This role
allows you to log into your application with your Dev Center username and
password so you don't have to go through the trouble of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Developer Access&lt;/h2&gt;
&lt;p&gt;In order to make it easier for developers to get in and start testing
applications we made a unique role called &lt;code&gt;DevCenterImpersonate&lt;/code&gt;. This role
allows you to log into your application with your Dev Center username and
password so you don't have to go through the trouble of creating a user first.&lt;/p&gt;
&lt;p&gt;To take advantage of this feature simply include the role
&lt;code&gt;DevCenterImpersonate&lt;/code&gt; in the scope of your authentication request:&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Impersonation</title><link href="https://ordercloud-api.github.io/docs/platform-guides/authentication/impersonation.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/authentication/impersonation.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In some instances, you may want to allow a user to order on behalf of another
user. We see this use case a lot in Customer Service Desk and Call Center
scenarios where customers will call their orders in and the service rep places
the order on the customer …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In some instances, you may want to allow a user to order on behalf of another
user. We see this use case a lot in Customer Service Desk and Call Center
scenarios where customers will call their orders in and the service rep places
the order on the customer’s behalf. This workflow preserves the reporting
data, email notifications, and presents the catalog ordering rules the buyer
is configured for.&lt;/p&gt;
&lt;p&gt;The OrderCloud.io API supports this capability by allowing certain users to
make API calls on behalf of a buyer user, which we refer to as impersonation.
If you're an admin user, with the &lt;code&gt;BuyerImpersonation&lt;/code&gt; role you can
impersonate any buyer user under your organizational umbrella as long as an
applicable Impersonation Config has been created. If you're a buyer user with
the &lt;code&gt;BuyerImpersonation&lt;/code&gt; role can impersonate any other buyer user within the
same buyer company as long as an applicable Impersonation Config has been
created.&lt;/p&gt;
&lt;h2&gt;Creating an Impersonation Config&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ImpersonationBuyerID&lt;/code&gt;, &lt;code&gt;ImpersonationGroupID&lt;/code&gt;, and &lt;code&gt;ImpersonationUserID&lt;/code&gt; all
reference the party you want to grant access to do the impersonating. While
&lt;code&gt;BuyerID&lt;/code&gt;, &lt;code&gt;GroupID&lt;/code&gt;, &lt;code&gt;UserID&lt;/code&gt; all reference the party who will be
impersonated. The &lt;code&gt;SecurityProfileID&lt;/code&gt; is the Security Profile you would like
to grant the user doing the impersonating (only while they are impersonating).
&lt;code&gt;ClientID&lt;/code&gt; is the specific application impersonation will be allowed in, if
you need to impersonate in multiple applications, you’ll need to set up
multiple Impersonation Configs.&lt;/p&gt;
&lt;p&gt;API reference: Create Impersonation Config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST POST https://api.ordercloud.io/v1/impersonationconfig HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json

{
  "ID": "…",
  "ImpersonationBuyerID": "…",
  "ImpersonationGroupID": "…",
  "ImpersonationUserID": "…",
  "BuyerID": "…",
  "GroupID": "…",
  "UserID": "…",
  "SecurityProfileID": "…",
  "ClientID": "…",
  "BuyerID": "…"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Retrieving the Access Token&lt;/h2&gt;
&lt;p&gt;After you have successfully created an applicable Impersonation Config, the
next step is to retrieve that buyer user's Access Token by using the Users
&lt;code&gt;GetAccessToken&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;p&gt;API reference: Get Access Token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://api.ordercloud.io/v1/buyers/{buyerID}/users/{userID}/accesstoken HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json

{
  "ClientID": "…",
  "Roles": [
    "DevCenterImpersonate"
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Subsequent Requests&lt;/h2&gt;
&lt;p&gt;The&lt;code&gt;access_token&lt;/code&gt; from the response will need to be included for each and
every OrderCloud.io API request in the Authorization header prefaced by
&lt;code&gt;Bearer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.ordercloud.io/v1/buyers HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You should now have a basic understanding of how to impersonate a buyer user
on Ordercloud.io, and when you may need to use this functionality.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Oauth2 Workflows</title><link href="https://ordercloud-api.github.io/docs/platform-guides/authentication/oauth2-workflows.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/authentication/oauth2-workflows.html</id><summary type="html">&lt;h2&gt;What is OAuth?&lt;/h2&gt;
&lt;p&gt;OAuth is an open standard for authorization commonly used as a way for users
to log into third party websites using Microsoft, Google, Facebook etc.
accounts without exposing their password. It is increasingly becoming an
industry standard for security and permission-based application experiences
and is what we …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is OAuth?&lt;/h2&gt;
&lt;p&gt;OAuth is an open standard for authorization commonly used as a way for users
to log into third party websites using Microsoft, Google, Facebook etc.
accounts without exposing their password. It is increasingly becoming an
industry standard for security and permission-based application experiences
and is what we use at OrderCloud.io. OAuth allows you to configure a total of
four different workflows all of which use the following Method and Request
URL.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
Content-Type: text/html; charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Required Information&lt;/h2&gt;
&lt;p&gt;All of the information required for an authentication request can be accessed
from your Dashboard.&lt;/p&gt;
&lt;h2&gt;1. Password Grant Type&lt;/h2&gt;
&lt;p&gt;This workflow is most appropriate for client apps where the user is a human,
i.e, a registered OrderCloud.io Buyer or Admin user. A successful
authentication with this workflow requires the following information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client ID&lt;/li&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;li&gt;Username&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grant Type: &lt;code&gt;grant_type=password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
Content-Type: text/html; charset=UTF-8&lt;/p&gt;
&lt;p&gt;client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;grant_type=password&amp;amp;username=xxxxxxxx&amp;amp;password=xxxxxxxx&amp;amp;scope=Shopper&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2. Client Credentials Grant Type&lt;/h2&gt;
&lt;p&gt;This configuration is best suited for an application where you need a way for
your backend system to log in. It is also appropriate when you are just
getting started and need to seed your application with users who can
subsequently authenticate using the Password Grant type. A successful
authentication with this workflow requires the following information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client ID&lt;/li&gt;
&lt;li&gt;Client Secret&lt;/li&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grant Type: &lt;code&gt;grant_type=client_credentials&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
Content-Type: text/html; charset=UTF-8&lt;/p&gt;
&lt;p&gt;client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;grant_type=client_credentials&amp;amp;client_secret=xxxxxxxxxxxxx&amp;amp;scope=FullAccess&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3. Anonymous Shopping or Guest Checkout&lt;/h2&gt;
&lt;p&gt;There are some B2B clients that will want to enable visitors to browse a
catalog of products and/or checkout without registering themselves. We call
this Anonymous Shopping or Guest Checkout. An in-depth guide for this workflow
is detailed here&lt;/p&gt;
&lt;h2&gt;4. Elevated Password Grant Type&lt;/h2&gt;
&lt;p&gt;The final workflow is the same as the Password Grant Type workflow except that
it has an additional requirement of Client Secret. This type of workflow would
be used if you want to add an additional layer of security.&lt;/p&gt;
&lt;p&gt;To use this workflow you will first need to set the Client Secret in the
Dashboard's app tab and include the Client Secret in each request&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
Content-Type: text/html; charset=UTF-8

client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;grant_type=client_credentials&amp;amp;client_secret=xxxxxxxxxxxxx&amp;amp;scope=FullAccess
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Subsequent Requests&lt;/h2&gt;
&lt;p&gt;A successful authentication (using one of the four workflows) will yield the
following response:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
   "access_token": "eyJ0eXAi0iJKV1QiLCJhbGci0iJ",
   "token_type" : "bearer",
   "expires_in" : 35999,
   "refresh_token": "878ca890-af6a-48b6-98a2-1e1cf4a.."
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;access_token&lt;/code&gt; from the response will need to be included in each and
every OrderCloud.io API request as part of the Authorization header prefaced
by &lt;code&gt;Bearer&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.ordercloud.io/v1/buyers HTTP/1.1
Authentication: Bearer eyJ0eXAi0iJKV1QiLCJhbGci0iJ9...
Content-Type: application/json; charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You should now have a basic understanding of the four different OAuth 2
workflows. Each of these workflows return a token which allows you to make
authenticated calls to OrderCloud.io.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Refresh Tokens</title><link href="https://ordercloud-api.github.io/docs/platform-guides/authentication/refresh-tokens.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/authentication/refresh-tokens.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;You will learn how to set-up and use refresh tokens which will allow your
users to remain signed in without having to reauthenticate. This guide assumes
you already know how to authenticate using one of the four workflows&lt;/p&gt;
&lt;h2&gt;__Understanding Tokens&lt;/h2&gt;
&lt;p&gt;A successful request to authenticate will return a response …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;You will learn how to set-up and use refresh tokens which will allow your
users to remain signed in without having to reauthenticate. This guide assumes
you already know how to authenticate using one of the four workflows&lt;/p&gt;
&lt;h2&gt;__Understanding Tokens&lt;/h2&gt;
&lt;p&gt;A successful request to authenticate will return a response much like the
following.&lt;/p&gt;
&lt;p&gt;In a typical workflow, you will use the access token in any request to the
OrderCloud.io API. When that token expires, you will need to re-authenticate.
The refresh token can be used to retrieve a new access token without needing
user credentials or a client secret.&lt;/p&gt;
&lt;p&gt;If you are planning on retrieving a new access token using this method then
you will want to store that refresh token when first authenticating.&lt;/p&gt;
&lt;p&gt;Although not visible from the response, the refresh token also has an
expiration duration. Once expired, you will no longer be able to request a new
access token using that refresh token. The expiration duration for both the
access and refresh tokens can be changed from the Applications view in the
Dashboard. A refresh token duration of &lt;code&gt;0&lt;/code&gt; will not return a refresh token.&lt;/p&gt;
&lt;h2&gt;__Using a Refresh Token&lt;/h2&gt;
&lt;p&gt;The following information will be needed for the request:  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Variable

&lt;/th&gt;  
&lt;th&gt;

Definition

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

grant_type

&lt;/td&gt;  
&lt;td&gt;

Value must be refresh_token

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

client_id

&lt;/td&gt;  
&lt;td&gt;

This will be the client ID used in the original request

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

refresh_token

&lt;/td&gt;  
&lt;td&gt;

This will be the refresh_token from the first response

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;A successful request might look like this:&lt;/p&gt;
&lt;h2&gt;__Conclusion&lt;/h2&gt;
&lt;p&gt;After reading this guide you should now be able to retrieve access tokens by
using refresh tokens. This will allow your users to remain signed in as long
as their refresh token has not expired.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Security Profiles</title><link href="https://ordercloud-api.github.io/docs/platform-guides/authentication/security-profiles.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/authentication/security-profiles.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Security Profiles are an assortment of roles that give access to specific
endpoints in the OrderCloud.io API. Profiles can be assigned to the users of
your Seller or Buyer application. If a request is made by a user without
sufficient roles they will receive 403 Forbidden response. Configuration …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Security Profiles are an assortment of roles that give access to specific
endpoints in the OrderCloud.io API. Profiles can be assigned to the users of
your Seller or Buyer application. If a request is made by a user without
sufficient roles they will receive 403 Forbidden response. Configuration of
these profiles is possible within the Security Profiles view in the
OrderCloud.io Dashboard.&lt;/p&gt;
&lt;h2&gt;__Roles&lt;/h2&gt;
&lt;p&gt;Security Profiles are made up of a list of roles which fall into one of two
categories: Admin and Reader. An &lt;strong&gt;Admin&lt;/strong&gt; role allows read and write access
while a &lt;strong&gt;Reader&lt;/strong&gt; role type allows only read access.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://ordercloud-api.github.io/docs/images/docs-guides/authentication/security-profiles.roles.png"&gt;&lt;/p&gt;
&lt;h2&gt;__Assigning Profiles&lt;/h2&gt;
&lt;p&gt;Security Profiles are assigned at the party level (User, User Group, Buyer
Organization or Admin Organization).&lt;/p&gt;
&lt;p&gt;If more than one Security Profile is inherited, the roles will be a union of
the roles from every inherited Security Profile.&lt;/p&gt;</content><category term="authentication"></category></entry></feed>