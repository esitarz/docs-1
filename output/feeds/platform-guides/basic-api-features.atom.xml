<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OrderCloud Documentation</title><link href="https://ordercloud-api.github.io/docs/" rel="alternate"></link><link href="https://ordercloud-api.github.io/docs/feeds/platform-guides/basic-api-features.atom.xml" rel="self"></link><id>https://ordercloud-api.github.io/docs/</id><updated>2018-03-19T15:32:44-05:00</updated><entry><title>Conventions</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/conventions.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/conventions.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;With few exceptions, the OrderCloud.io API adheres to a RESTful architectural
style. URIs, HTTP verbs, headers, payloads, and response codes all follow
consistent and predictable patterns. This guide will outline conventions that
permeate the entire platform.&lt;/p&gt;
&lt;h2&gt;__SSL Everywhere&lt;/h2&gt;
&lt;p&gt;API access is only allowed via HTTPS; connections on port …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;With few exceptions, the OrderCloud.io API adheres to a RESTful architectural
style. URIs, HTTP verbs, headers, payloads, and response codes all follow
consistent and predictable patterns. This guide will outline conventions that
permeate the entire platform.&lt;/p&gt;
&lt;h2&gt;__SSL Everywhere&lt;/h2&gt;
&lt;p&gt;API access is only allowed via HTTPS; connections on port 80 are refused
entirely. This simplifies the token-based authentication.&lt;/p&gt;
&lt;h2&gt;__JSON Everywhere&lt;/h2&gt;
&lt;p&gt;UTF-8 encoded JSON is currently the only supported data format for both
request and response payloads.&lt;/p&gt;
&lt;h2&gt;__Date Format&lt;/h2&gt;
&lt;p&gt;Dates/times returned in the API are in UTC time and conform to &lt;a href="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO
8601&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;__OAuth 2&lt;/h2&gt;
&lt;p&gt;OrderCloud API authentication is based on the &lt;a href="http://tools.ietf.org/html/rfc6749"&gt;OAuth 2
specification&lt;/a&gt; and supports four different
workflows, or, in OAuth terms, grant types. Check out our workflows guide to
learn more.&lt;/p&gt;
&lt;h2&gt;__Writeable IDs&lt;/h2&gt;
&lt;p&gt;Writable IDs can be extremely useful for back-office integrations. They can
potentially eliminate the need for a mapping middleware layer.&lt;/p&gt;
&lt;p&gt;Most resources that map to an entity of some sort (Orders, Users, Addresses,
etc.) contain an ID that is optionally writable on creation or update. If you
do not pass one, one will be auto-generated and returned in the response, and
will be guaranteed to be unique. If you choose to pass an ID, you are
responsible for ensuring uniqueness. Things that live under the context of a
single Buyer need only be unique within that context. Things that are shared
(such as products) must be unique across the entire Admin organization.&lt;/p&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;For all unsuccessful requests, we attempt to return the &lt;a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error"&gt;most appropriate HTTP
status in the 400
range&lt;/a&gt;.
Only when something goes terribly wrong on our end will you get a 500
response. And so long as our platform is responding (i.e. returing anything in
the 4xx range or 500), you can count on the response body taking a standard
shape.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Errors</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/errors.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/errors.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;OrderCloud.io uses conventional HTTP response codes to indicate success or
failure of an API request. In general, codes in the &lt;code&gt;2xx&lt;/code&gt; range indicate
success and codes in the &lt;code&gt;4xx&lt;/code&gt; range indicate an error failed given the
information provided (e.g., a required parameter). Only when something goes
terribly …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;OrderCloud.io uses conventional HTTP response codes to indicate success or
failure of an API request. In general, codes in the &lt;code&gt;2xx&lt;/code&gt; range indicate
success and codes in the &lt;code&gt;4xx&lt;/code&gt; range indicate an error failed given the
information provided (e.g., a required parameter). Only when something goes
terribly wrong on our end will you receive a &lt;code&gt;500&lt;/code&gt; response. As long as the
platform is responding you can count on the response body taking a standard
shape.&lt;/p&gt;
&lt;h2&gt;__HTTP Status Code Summary&lt;/h2&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt;  
&lt;th&gt;

Suggested Course of Action

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

200 - OK

&lt;/td&gt;  
&lt;td&gt;

Everything worked as expected. No action required.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

201 - Created

&lt;/td&gt;  
&lt;td&gt;

Something has been successfully created. No action required.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

204 - No Content

&lt;/td&gt;  
&lt;td&gt;

The server has successfully fulfilled the request. No action required.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

401 - Unauthorized

&lt;/td&gt;  
&lt;td&gt;

The user is not authorized to make a call to the API. Check that user
credentials are valid.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

403 - Forbidden

&lt;/td&gt;  
&lt;td&gt;

The user's Security Profile does not have the necessary roles to make the API
call. Update Security Profile to include valid roles for the call.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

404 - Not Found

&lt;/td&gt;  
&lt;td&gt;

The requested resource was not found. A common reason for this is a bad
request.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

500 - Internal Server Error

&lt;/td&gt;  
&lt;td&gt;

There was a server-side issue. Please contact us if you encounter this error
code.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="basic api features"></category></entry><entry><title>Extended Properties</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/extended-properties.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/extended-properties.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The reality of all enterprise platforms is the need to customize the data
model. To accommodate this, OrderCloud.io designed a property called Extended
Properties (XP) to allow enterprise customization of the OrderCloud data
model. OrderCloud.io exposes the &lt;code&gt;{ xp: {} }&lt;/code&gt; property on most resources
allowing you to apply JSON …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The reality of all enterprise platforms is the need to customize the data
model. To accommodate this, OrderCloud.io designed a property called Extended
Properties (XP) to allow enterprise customization of the OrderCloud data
model. OrderCloud.io exposes the &lt;code&gt;{ xp: {} }&lt;/code&gt; property on most resources
allowing you to apply JSON objects. The JSON object can be as complex and
deeply-nested as necessary. Additionally, the XP property is available for
filtering, sorting and searching in all list endpoints. Extended Properties
allows you to overcome platform rigidity. So, to optimize the use of our data
model, and to help you fully implement your B2B scenarios, we created a
schema-less solution with XP and exposed it on virtually every API resource.
We may not have &lt;code&gt;Product.YourSpecialDataPoint&lt;/code&gt;, but we do have
&lt;code&gt;Product.xp.YourSpecialDataPoint&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Add, Update and Remove XP&lt;/h2&gt;
&lt;p&gt;The entire XP object must be &lt;strong&gt;8000 bytes&lt;/strong&gt; or less and must be a valid JSON
object. Any key-value pairs of numbers, strings, booleans, arrays, and even
other objects can be used.&lt;/p&gt;
&lt;h2&gt;Adding XP&lt;/h2&gt;
&lt;p&gt;Let's say one of the requirements for your solution includes storing the age
and gender of users. You can accomplish this by storing those data points in
the user's XP. If you do not include JSON, XP will be set to null by default
on all parent objects. To declare XP, simply replace the null value with the
valid JSON.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST https://api.ordercloud.io/buyers/newbuyer/users HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json; charset=UTF-8

{
 "Username": "janesmith",
 "Password": "test12345",
 "FirstName": "Jane",
 "LastName": "Smith",
 "Email": "jsmith@company.com",
 "Phone": "555-555-5555",
 "TermsAccepted": null,
 "Active": true,
 "xp": {
   "Gender": "Female",
   "Age" : 26
 },
 "SecurityProfileID": "FullAccess"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Nesting XP&lt;/h2&gt;
&lt;p&gt;Let's say requirements have shifted and the solution now requires the ability
to store information about the user's employment details, specifically job
title and department. This can easily be accomplished using nested objects
within XP.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT https://api.ordercloud.io/buyers/newbuyer/users/userID HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json; charset=UTF-8

{
 "Username": "janesmith",
 "Password": "test12345",
 "FirstName": "Jane",
 "LastName": "Smith",
 "Email": "jsmith@company.com",
 "Phone": "555-555-5555",
 "TermsAccepted": null,
 "Active": true,
 "xp": {
         "Gender": "Female",
         "Age" : 26,
         "EmploymentDetails" : {
           "Position": "Developer",
           "Department": "Tech"
   }

 },
 "SecurityProfileID": "FullAccess"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Modifying XP&lt;/h2&gt;
&lt;p&gt;Now let's say Jane Smith receives a promotion. To update her job title we can
use &lt;code&gt;PATCH&lt;/code&gt; to modify the relevant data. Instead of sending the entire user
object, we can send the XP key and the object that we want to update, the
other XP (gender and age) will persist.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PUT https://api.ordercloud.io/buyers/newbuyer/users/userID HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json; charset=UTF-8

{
   "xp": {
   "EmploymentDetails" : {
       "Position": "Senior Developer",
       "Department": "Tech"
        }
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Deleting XP&lt;/h2&gt;
&lt;p&gt;The only way to remove a specific xp from your resource is to use the Update
(PUT) method. First GET the resource, then copy the response body returned,
paste it into your PUT request and omit the xp key/value you wish to remove.
Alternatively, if you don’t need it actually deleted, you are able to set any
xp’s value to null. In the example below, we're removing the "Age" xp from
this user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.ordercloud.io/buyers/newbuyer/users/userID HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json; charset=UTF-8
                {
 "Username": "janesmith",
 "Password": "test12345",
 "FirstName": "Jane",
 "LastName": "Smith",
 "Email": "jsmith@company.com",
 "Phone": "555-555-5555",
 "TermsAccepted": null,
 "Active": true,
 "xp": {
         "Gender": "Female",
         "Age" : 26,
         "EmploymentDetails" : {
           "Position": "Developer",
           "Department": "Tech"
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, use the response body from the request above (without the xp you wish to
remove):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UPDATE https://api.ordercloud.io/buyers/newbuyer/users/userID HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json; charset=UTF-8

{
 "Username": "janesmith",
 "Password": "test12345",
 "FirstName": "Jane",
 "LastName": "Smith",
 "Email": "jsmith@company.com",
 "Phone": "555-555-5555",
 "TermsAccepted": null,
 "Active": true,
 "xp": {
         "Gender": "Female",
         "EmploymentDetails" : {
           "Position": "Developer",
           "Department": "Tech"
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Searching on XP&lt;/h2&gt;
&lt;p&gt;Not only can XP be used to extend the functionality of your application, but
you can use filters to search for indexed xp values on any given resource.
After all, how much benefit would XP provide if you couldn't query a subset of
objects based on a specific XP value? All of the filtering capabilities that
apply to regular values on OrderCloud.io objects also apply to XP values. This
means you can search with all of the standard operators available
(&lt;code&gt;=&lt;/code&gt;,&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;). Below is an example of filtering for a deeply nested value in
XP:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET https://api.ordercloud.io/buyers/newbuyer/users?xp.EmploymentDetails.Department=Tech HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json; charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how the dot (".") notation is used in the query string to filter on the
specified deeply nested XP field. Check out the searching, filtering and
sorting guides to learn more about querying.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;XP is a very powerful feature to extend the capabilities of your application.
It provides the flexibility developers need to meet challenging requirements,
giving you the ability to provide a highly customized solutions. Head over to
the API Console to try it for yourself!&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Filtering</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/filtering.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/filtering.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The items from such a call could very well be in the thousands so
being able to narrow down the range of the items returned is critical, this
can be done with the use of filters …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The items from such a call could very well be in the thousands so
being able to narrow down the range of the items returned is critical, this
can be done with the use of filters.&lt;/p&gt;
&lt;h2&gt;__Filtering On XP&lt;/h2&gt;
&lt;p&gt;Let's examine a common scenario of filtering on an extended property (XP)
field. Suppose our XP field looks like this:&lt;/p&gt;
&lt;p&gt;We can use dot notation to access deeply nested values. The following call
will return all buyers with team name "Tigers"&lt;/p&gt;
&lt;h2&gt;__Fuzzy Searches&lt;/h2&gt;
&lt;p&gt;Fuzzy matches are supported using the &lt;code&gt;*&lt;/code&gt; wildcard character.&lt;/p&gt;
&lt;p&gt;This will return both "John Smith" and "Johnny McSmooth".&lt;/p&gt;
&lt;h2&gt;__Logical OR&lt;/h2&gt;
&lt;p&gt;You can also use &lt;code&gt;|&lt;/code&gt; as a logical OR.&lt;/p&gt;
&lt;p&gt;This will return "John Smith", "Johnny Jones", and "John Johnson". Maybe you
want "John Smith" but not "John Jones".&lt;/p&gt;
&lt;h2&gt;__Negate and Logical AND&lt;/h2&gt;
&lt;p&gt;You can negate your conditions by prefixing them with &lt;code&gt;!&lt;/code&gt;, and logically &lt;code&gt;AND&lt;/code&gt;
them together by simply providing the same parameter multiple times.&lt;/p&gt;
&lt;p&gt;This will return all users &lt;em&gt;except&lt;/em&gt; those with last name "Smith" or "Jones".&lt;/p&gt;
&lt;h2&gt;__Comparison Operators&lt;/h2&gt;
&lt;p&gt;Dates and numeric values support &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than) and &lt;code&gt;&amp;lt;&lt;/code&gt; (less than)
prefixes.&lt;/p&gt;
&lt;p&gt;For a more advanced example, let's say you want users whose ID is the range of
0 to 9 inclusive. Ranges are not directly supported, but you can use the
existing features to achieve this.&lt;/p&gt;
&lt;p&gt;Of course that's not going to be feasible if the range is very large or you're
dealing with floating-point numbers. A better way would be to leverage &lt;code&gt;&amp;gt;&lt;/code&gt; and
&lt;code&gt;&amp;lt;&lt;/code&gt;, but we want the range to be inclusive, and there are no &lt;code&gt;&amp;gt;=&lt;/code&gt; or &lt;code&gt;&amp;lt;=&lt;/code&gt;
operators. We can however leverage the &lt;code&gt;!&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;Here we're saying "give me all users whose ID is not less than 0 and not
greater than 9", which is effectively equivalent to our 0-9 range.&lt;/p&gt;
&lt;h2&gt;__Performance Considerations&lt;/h2&gt;
&lt;p&gt;Your data is highly indexed for fast retrieval using any of the methods above,
including deep XP object graphs. However, there are a few things to keep in
mind to keep search and listing functionality efficient. Filters with many
&lt;code&gt;OR&lt;/code&gt; conditions or with values that start with the &lt;code&gt;*&lt;/code&gt; wildcard character may
be particularly performance-sensitive. The larger the set of data, the more
likely you are to notice any performance impact. It pays to know the data
model well, and use grouping constructs like User Groups and Categories
effectively.&lt;/p&gt;
&lt;h2&gt;__Combining Queries&lt;/h2&gt;
&lt;p&gt;Filtering can be mixed and matched with Searching and Sorting to give you
ultimate control when defining what is returned from a list.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Http Methods</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/http-methods.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/http-methods.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;A resource is a set of endpoints used to interact with an object of that same
name. OrderCloud.io adheres to RESTful conventions in its usage of HTTP verbs.
You can expect a subset of the following methods to exist on every Resource.&lt;/p&gt;
&lt;h2&gt;__HTTP Methods&lt;/h2&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

OrderCloud.io Verb

&lt;/th&gt;  
&lt;th&gt;

HTTP …&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;A resource is a set of endpoints used to interact with an object of that same
name. OrderCloud.io adheres to RESTful conventions in its usage of HTTP verbs.
You can expect a subset of the following methods to exist on every Resource.&lt;/p&gt;
&lt;h2&gt;__HTTP Methods&lt;/h2&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

OrderCloud.io Verb

&lt;/th&gt;  
&lt;th&gt;

HTTP Verb

&lt;/th&gt;  
&lt;th&gt;

Meaning

&lt;/th&gt;  
&lt;th&gt;

Example

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

GET

&lt;/td&gt;  
&lt;td&gt;

GET

&lt;/td&gt;  
&lt;td&gt;

Returns a specific item

&lt;/td&gt;  
&lt;td&gt;

Get a single address

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

CREATE/REPLACE

&lt;/td&gt;  
&lt;td&gt;

PUT

&lt;/td&gt;  
&lt;td&gt;

Create or replace an item, you provide a unique ID

&lt;/td&gt;  
&lt;td&gt;

Create address ABC, overwriting it if it already exists

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

UPDATE

&lt;/td&gt;  
&lt;td&gt;

PATCH

&lt;/td&gt;  
&lt;td&gt;

Use it for updating items

&lt;/td&gt;  
&lt;td&gt;

Update the name on an address by providing the new name

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

LIST

&lt;/td&gt;  
&lt;td&gt;

GET

&lt;/td&gt;  
&lt;td&gt;

Returns a list of items

&lt;/td&gt;  
&lt;td&gt;

Get a list of addresses

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

CREATE

&lt;/td&gt;  
&lt;td&gt;

POST

&lt;/td&gt;  
&lt;td&gt;

Creates a new item, we generate a unique ID if no ID is provided

&lt;/td&gt;  
&lt;td&gt;

Create a new address

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

DELETE

&lt;/td&gt;  
&lt;td&gt;

DELETE

&lt;/td&gt;  
&lt;td&gt;

Deletes an item

&lt;/td&gt;  
&lt;td&gt;

Delete address ABC from the database

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="basic api features"></category></entry><entry><title>Pagination</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/pagination.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/pagination.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. These resources can potentially include thousands of items so
restricting the data that is returned from such a request is not only
practical but necessary. OrderCloud.io offers server-side pagination that
partitions the data returned from …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. These resources can potentially include thousands of items so
restricting the data that is returned from such a request is not only
practical but necessary. OrderCloud.io offers server-side pagination that
partitions the data returned from these requests into manageable chunks to
optimize client-side performance&lt;/p&gt;
&lt;h2&gt;__Listing&lt;/h2&gt;
&lt;p&gt;A request to list a resource will return an object with two values: &lt;code&gt;Meta&lt;/code&gt; and
&lt;code&gt;Items&lt;/code&gt;. The &lt;code&gt;Meta&lt;/code&gt; value returns important information regarding your query,
such as total results, how many results are shown in the Items array, how many
more pages of results there are, and what page you are currently on. The Items
array stores the actual results of the resource you are querying.&lt;/p&gt;
&lt;p&gt;Lists default to 20 items per page, but you can set the &lt;code&gt;pageSize&lt;/code&gt; up to 100.
If you have more results than the page count, you will have multiple pages.
You can use the &lt;code&gt;Page&lt;/code&gt; and &lt;code&gt;PageSize&lt;/code&gt; values from the &lt;code&gt;Meta&lt;/code&gt; object to specify
the page (starting at 1) and items per page. Note that unlike the page
parameter, &lt;code&gt;ItemRange&lt;/code&gt; values are zero-based.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Searching</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/searching.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/searching.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Searching data client side can be fine for smaller sets of data but can
quickly become unwieldy with large sets of data. To address this issue our API
supports server side search queries that do all of the heavy lifting for you.&lt;/p&gt;
&lt;h2&gt;__Searching&lt;/h2&gt;
&lt;p&gt;For open-ended, Google-esque searches, simply provide …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Searching data client side can be fine for smaller sets of data but can
quickly become unwieldy with large sets of data. To address this issue our API
supports server side search queries that do all of the heavy lifting for you.&lt;/p&gt;
&lt;h2&gt;__Searching&lt;/h2&gt;
&lt;p&gt;For open-ended, Google-esque searches, simply provide a search term.&lt;/p&gt;
&lt;p&gt;Request&lt;/p&gt;
&lt;p&gt;This will return all results containing "smith", including "Smith",
"Smithers", and "McSmith". The fields searched include &lt;code&gt;FirstName&lt;/code&gt;,&lt;code&gt;LastName&lt;/code&gt;,
and &lt;code&gt;UserName&lt;/code&gt;. (This of course varies from endpoint to endpoint. View each
endpoint's documentation for specific details). Fields marked “Searchable” in
the API reference will be searched.&lt;/p&gt;
&lt;p&gt;You can optionally specify which fields (of the searchable fields available)
are searched by providing a &lt;code&gt;searchOn&lt;/code&gt; parameter for any field available on
the resource you're searching.&lt;/p&gt;
&lt;h2&gt;__Combining Queries&lt;/h2&gt;
&lt;p&gt;Searching can be mixed and matched with Sorting and Filtering to give you
ultimate control when defining what is returned from a list.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Sorting</title><link href="https://ordercloud-api.github.io/docs/platform-guides/basic-api-features/sorting.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/platform-guides/basic-api-features/sorting.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The results returned from a list method have a default sort order,
but you can also specify a sort order. Properties marked as “Sortable” in the
API Reference can be sorted on.&lt;/p&gt;
&lt;h2&gt;__Sorting&lt;/h2&gt;
&lt;p&gt;Perhaps you want …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The results returned from a list method have a default sort order,
but you can also specify a sort order. Properties marked as “Sortable” in the
API Reference can be sorted on.&lt;/p&gt;
&lt;h2&gt;__Sorting&lt;/h2&gt;
&lt;p&gt;Perhaps you want to sort the results by the Last Name of the person who placed
an order. To do this you can simply include the &lt;code&gt;sortBy&lt;/code&gt; parameter for the
field you would like to sort by.&lt;/p&gt;
&lt;h2&gt;__Combining Queries&lt;/h2&gt;
&lt;p&gt;Sorting can be mixed and matched with Searching and Filtering to give you
ultimate control when defining what is returned from a list.&lt;/p&gt;</content><category term="basic api features"></category></entry></feed>