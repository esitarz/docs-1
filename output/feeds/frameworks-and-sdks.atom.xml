<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>OrderCloud Documentation Content - Frameworks And Sdks</title><link href="https://ordercloud-api.github.io/docs/" rel="alternate"></link><link href="https://ordercloud-api.github.io/docs/feeds/frameworks-and-sdks.atom.xml" rel="self"></link><id>https://ordercloud-api.github.io/docs/</id><updated>2018-03-19T15:32:44-05:00</updated><entry><title>Angularjs: Application Files</title><link href="https://ordercloud-api.github.io/docs/frameworks-and-sdks/angularjs-application-files.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/frameworks-and-sdks/angularjs-application-files.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;src/app&lt;/code&gt; directory contains all code specific to this application. Apart
from &lt;code&gt;app.*.js&lt;/code&gt; and its accompanying tests (discussed below), this directory
is filled with subdirectories corresponding to high-level sections of the
application, often corresponding to top-level routes. Each directory can have
as many subdirectories as it needs …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;src/app&lt;/code&gt; directory contains all code specific to this application. Apart
from &lt;code&gt;app.*.js&lt;/code&gt; and its accompanying tests (discussed below), this directory
is filled with subdirectories corresponding to high-level sections of the
application, often corresponding to top-level routes. Each directory can have
as many subdirectories as it needs, and the build system will understand what
to do. For example, a top-level route might be &lt;code&gt;productManagement&lt;/code&gt;, which
would be a directory within the &lt;code&gt;src/app&lt;/code&gt; directory that conceptually
corresponds to the top-level route &lt;code&gt;/products&lt;/code&gt;, though this is in no way
enforced. &lt;code&gt;productManagement&lt;/code&gt; may then have subdirectories for &lt;code&gt;inventory&lt;/code&gt;,
&lt;code&gt;pricing&lt;/code&gt;, &lt;code&gt;product&lt;/code&gt;, etc. The &lt;code&gt;product&lt;/code&gt; submodule may then define a route of
&lt;code&gt;/products/:id&lt;/code&gt;, ad infinitum.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/
  |- app/
  |  |- app.constants.json
  |  |- app.controller.js
  |  |- app.module.js
  |  |- app.run.js
  |  |- app.spec.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;app.constants.json&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This small, yet powerful file host a JSON object of key value pairs to be used
throughout the application. From this object, the build process will generate
a file containing AngularJS constants &lt;a href="https://github.com/ordercloud-
api/angular-seller/blob/development/gulp.config.js#L86-L123"&gt;here&lt;/a&gt;, which are used
to connect to your OrderCloud organizations.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;app.controller.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is the application's main controller. &lt;code&gt;AppCtrl&lt;/code&gt; is a good place for logic
not specific to the template or route, such as menu logic or page title
wiring. This controller also allows for numerous Angular services such as
&lt;code&gt;$state&lt;/code&gt; and &lt;code&gt;$ocMedia&lt;/code&gt; and service methods such as &lt;code&gt;ocIsTouchDevice&lt;/code&gt; and
&lt;code&gt;stateLoading&lt;/code&gt; to be globally available throughout the application's various
templates. &lt;code&gt;AppCtrl&lt;/code&gt; is not declared in a state provider like the
application's component controllers. Instead, it is declared directly in
&lt;code&gt;index.html&lt;/code&gt; with &lt;code&gt;ng-controller="AppCtrl as application"&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;angular.module('orderCloud')
    .controller('AppCtrl', AppController)
;
function AppController($state, $ocMedia, LoginService, appname, ocStateLoading, ocIsTouchDevice, ocRoles) {
    var vm = this;
    vm.name = appname;
    vm.$state = $state;
    vm.$ocMedia = $ocMedia;
    vm.isTouchDevice = ocIsTouchDevice;
    vm.stateLoading = ocStateLoading.Watch;
    vm.logout = LoginService.Logout;
    vm.userIsAuthorized = ocRoles.UserIsAuthorized;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;app.module.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is our main app file. It kickstarts the whole process by requiring all
the modules that we need.&lt;/p&gt;
&lt;p&gt;By default, the OrderCloud AngularJS Seed includes a few useful modules
written by the AngularJS and Angular-UI teams. We also include the
&lt;code&gt;orderCloud.sdk&lt;/code&gt; module for connecting to the OrderCloud API. Lastly, some
helpful third party modules are included as well, such as &lt;code&gt;toastr&lt;/code&gt; and
&lt;code&gt;angular-busy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All components within the application are tied directly to the &lt;code&gt;orderCloud&lt;/code&gt;
module, so they do not need to be included here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;angular.module('orderCloud', [
        'ngSanitize',
        'ngAnimate',
        'ngMessages',
        'ngTouch',
        'ui.tree',
        'ui.router',
        'ui.select',
        'ui.bootstrap',
        'ui.select',
        'LocalForageModule',
        'toastr',
        'angular-busy',
        'jcs-autoValidate',
        'treeControl',
        'hl.sticky',
        'angularPayments',
        'ordercloud-angular-sdk'
    ]
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;id="-app-run-js-"&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;app.run.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Use the main applications run method to execute any code after services have
been instantiated. By default, we initialize &lt;code&gt;ocStateLoading&lt;/code&gt;, validation
error messages (using &lt;code&gt;angular-auto-validate&lt;/code&gt;), and validation styling.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;angular.module('orderCloud')
    .run(AppRun)
;


function AppRun(ocStateLoading, ocRefreshToken, defaultErrorMessageResolver, ocErrorMessages, validator) {
    ocStateLoading.Init();


    defaultErrorMessageResolver.getErrorMessages().then(function (errorMessages) {
        angular.extend(errorMessages, ocErrorMessages);
    });


    validator.setValidElementStyling(false);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;app.spec.js&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One of the design philosophies of &lt;code&gt;angular-seller&lt;/code&gt; is that tests should exist
alongside the code they test and that the build system should be smart enough
to know the difference and react accordingly. As such, the unit test for
&lt;code&gt;app.*.js&lt;/code&gt; is &lt;code&gt;app.spec.js&lt;/code&gt;.&lt;/p&gt;</content><category term="angularjs"></category></entry><entry><title>Angularjs: Connecting To Your Organization</title><link href="https://ordercloud-api.github.io/docs/frameworks-and-sdks/angularjs-connecting-to-your-organization.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/frameworks-and-sdks/angularjs-connecting-to-your-organization.html</id><summary type="html">&lt;p&gt;Linking your front-end application to an OrderCloud seller or buyer
organization can be accomplished using the &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;clientid&lt;/code&gt; constants
described below.&lt;/p&gt;
&lt;h2&gt;Application Constants&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;src/app/app.constants.json&lt;/code&gt; is a small, yet powerful file host a JSON object
of key value pairs to be used throughout the application. From …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linking your front-end application to an OrderCloud seller or buyer
organization can be accomplished using the &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;clientid&lt;/code&gt; constants
described below.&lt;/p&gt;
&lt;h2&gt;Application Constants&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;src/app/app.constants.json&lt;/code&gt; is a small, yet powerful file host a JSON object
of key value pairs to be used throughout the application. From this object,
the build process will generate a file containing AngularJS constants:
&lt;a href="https://github.com/ordercloud-api/angular-
seller/blob/development/gulp.config.js#L86"&gt;here&lt;/a&gt;, which can then be injected into
your various AngularJS controllers, factories, providers, etc. Think of it as
a base configuration or settings file for your application.  &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;

Constant

&lt;/th&gt;
&lt;th&gt;

Type

&lt;/th&gt;
&lt;th&gt;

Description

&lt;/th&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`appname`

&lt;/td&gt;
&lt;td&gt;

string

&lt;/td&gt;
&lt;td&gt;

A short name for your application. This will be used in the `&lt;title&gt;` as well
as displayed in the top left navigation of the application.

&lt;/title&gt;&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`scope`

&lt;/td&gt;
&lt;td&gt;

string

&lt;/td&gt;
&lt;td&gt;

A space delimited string of OrderCloud roles that will be requested during
authentication.

&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`clientid`

&lt;/td&gt;
&lt;td&gt;

string

&lt;/td&gt;
&lt;td&gt;

An OrderCloud ClientID for the seller, buyer network, or buyer application
that will be used for authentication.

&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`environment`

&lt;/td&gt;
&lt;td&gt;

string

&lt;/td&gt;
&lt;td&gt;

A string declaring the OrderCloud environment the application will point to.
Currently, only `production` is available; however, when a large release
consisting of breaking changes is scheduled, a `staging` environment will be
provided.

&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`defaultstate`

&lt;/td&gt;
&lt;td&gt;

string

&lt;/td&gt;
&lt;td&gt;

The default ui-router state within the application that users will be directed
to should they attempt to access a state that does not exist.

&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`html5mode`

&lt;/td&gt;
&lt;td&gt;

bool

&lt;/td&gt;
&lt;td&gt;

True/false whether you want HTML5 Mode enable within the application.

&lt;/td&gt; &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

`bootswatchtheme`

&lt;/td&gt;
&lt;td&gt;

string

&lt;/td&gt;
&lt;td&gt;

The Bootswatch theme that is automatically applied to the application during
the build process. A list of available themes can be found
[here](https://bootswatch.com/). A value of `null` will apply the default
angular-seller theme.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
&lt;h2&gt;Process Environment Variable Overrides&lt;/h2&gt;
&lt;p&gt;The constants provided above can be overwritten within your hosting providers
application settings. For example, within Heroku, you can override these
constants using their &lt;a href="https://devcenter.heroku.com/articles/config-vars#setting-up-
config-vars-for-a-deployed-application"&gt;Config
Variables&lt;/a&gt;. This is accomplished in the
&lt;a href="https://github.com/ordercloud-api/angular-
seller/blob/development/gulp.config.js#L116-L121"&gt;&lt;code&gt;gulp.config.js&lt;/code&gt;&lt;/a&gt; file, which can be
customized to include additional application constants.&lt;/p&gt;</content><category term="angularjs"></category></entry><entry><title>Angularjs: Contributing</title><link href="https://ordercloud-api.github.io/docs/frameworks-and-sdks/angularjs-contributing.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/frameworks-and-sdks/angularjs-contributing.html</id><summary type="html">&lt;p&gt;The OrderCloud team welcomes any and all open-source contributors to create a
pull request for bug fixes, enhancements, or new features (pending review).&lt;/p&gt;
&lt;p&gt;Prior to writing any code, be sure to open an issue
(&lt;a href="https://github.com/ordercloud-api/angular-seller/issues"&gt;Seller&lt;/a&gt;,
&lt;a href="https://github.com/ordercloud-api/angular-seller/issues"&gt;Buyer&lt;/a&gt;) with a
detailed description of your problem or proposed enhancement. We may already
be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The OrderCloud team welcomes any and all open-source contributors to create a
pull request for bug fixes, enhancements, or new features (pending review).&lt;/p&gt;
&lt;p&gt;Prior to writing any code, be sure to open an issue
(&lt;a href="https://github.com/ordercloud-api/angular-seller/issues"&gt;Seller&lt;/a&gt;,
&lt;a href="https://github.com/ordercloud-api/angular-seller/issues"&gt;Buyer&lt;/a&gt;) with a
detailed description of your problem or proposed enhancement. We may already
be on our way to delivering what you want!&lt;/p&gt;
&lt;p&gt;We use GitHub's standard &lt;a href="https://gist.github.com/Chaser324/ce0505fbed06b947d962"&gt;fork, branch, pull request
workflow&lt;/a&gt; and expect
any contributors to follow a similar workflow. Always provide a passing unit
test for any fix or enhancement.&lt;/p&gt;
&lt;p&gt;Thank you for being a part of the &lt;a href="http://community.ordercloud.io"&gt;OrderCloud
Community&lt;/a&gt; and helping make our resources the
best they can be!&lt;/p&gt;</content><category term="angularjs"></category></entry><entry><title>Angularjs: Source Directory</title><link href="https://ordercloud-api.github.io/docs/frameworks-and-sdks/angularjs-source-directory.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/frameworks-and-sdks/angularjs-source-directory.html</id><summary type="html">&lt;h2&gt;&lt;code&gt;./src/&lt;/code&gt; Directory&lt;/h2&gt;
&lt;p&gt;This is where the majority of development work will occur. It contains all of
the application code, tests, and assets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/
  |- app/
  |- assets/
  |- index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;src/app/&lt;/strong&gt; - contains all of the application code and corresponding tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/assets/&lt;/code&gt; - static files like fonts and images&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src/index.html&lt;/strong&gt; - this …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;&lt;code&gt;./src/&lt;/code&gt; Directory&lt;/h2&gt;
&lt;p&gt;This is where the majority of development work will occur. It contains all of
the application code, tests, and assets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/
  |- app/
  |- assets/
  |- index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;src/app/&lt;/strong&gt; - contains all of the application code and corresponding tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src/assets/&lt;/code&gt; - static files like fonts and images&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src/index.html&lt;/strong&gt; - this is the HTML document of the single-page application&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The index file is the HTML document of the single-page application (SPA). This
is the highest level container for everything in your angular application.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The application module (orderCloud) and application controller (AppCtrl) are
both loaded on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element. We use the &lt;a href="https://toddmotto.com/digging-into-angulars-controller-as-syntax/"&gt;controllerAs
syntax&lt;/a&gt;, so
keep in mind that anything attached to the &lt;code&gt;AppCtrl&lt;/code&gt; view model is accessible
under the name &lt;code&gt;application&lt;/code&gt; in all of your template files.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element there are some basic &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags and a dynamic
&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag which takes advantage of &lt;code&gt;ui-router&lt;/code&gt;'s &lt;code&gt;$state&lt;/code&gt; service and the
&lt;code&gt;appname&lt;/code&gt; constant. You can see how we are referencing the &lt;code&gt;AppCtrl&lt;/code&gt; via the
controllerAs syntax below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//dynamic application title
&amp;lt;title ng-bind="application.$state.current.data.pageTitle + (application.$state.current.data.pageTitle ? ' | ' : '') + application.name()"&amp;gt;
    OrderCloud
&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, there are some very important comments that are used to
dynamically set the &lt;code&gt;base[href]&lt;/code&gt; attribute and inject reference bower and
application CSS styles during the gulp &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;compile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the end of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; you will find the link for the OrderCloud favicon.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The body element contains the &lt;code&gt;ui-view&lt;/code&gt; in which all other application
templates will be loaded. Within the &lt;code&gt;&amp;lt;ui-view&amp;gt;&lt;/code&gt; element we've placed the HTML
used by &lt;a href="https://github.com/ordercloud-api/angular-
seller/blob/development/src/app/common/config/angular-busy/angular-busy.js"&gt;angular-busy&lt;/a&gt; to
display a loading indicator while angular bootstraps itself.&lt;/p&gt;
&lt;p&gt;At the end of the body we again have some important comment markup that is
used to dynamically inject all of the bower and application javascript files.&lt;/p&gt;</content><category term="angularjs"></category></entry><entry><title>Csharp: Getting Started</title><link href="https://ordercloud-api.github.io/docs/frameworks-and-sdks/csharp-getting-started.html" rel="alternate"></link><published>2018-03-19T15:32:44-05:00</published><updated>2018-03-19T15:32:44-05:00</updated><author><name>OrderCloud.io</name></author><id>tag:ordercloud-api.github.io,2018-03-19:/docs/frameworks-and-sdks/csharp-getting-started.html</id><summary type="html">&lt;h4&gt;We are currently updating and enhancing our C# SDK.&lt;/h4&gt;
&lt;p&gt;When that work is complete, we'll publish an updated guide here. In the meantime, you can still
use our &lt;a href="https://github.com/ordercloud-api/OrderCloud-CSharp-
SDK"&gt;existing C# SDK&lt;/a&gt;. Please don't hesitate to contact us with any questions.&lt;/p&gt;</summary><content type="html">&lt;h4&gt;We are currently updating and enhancing our C# SDK.&lt;/h4&gt;
&lt;p&gt;When that work is complete, we'll publish an updated guide here. In the meantime, you can still
use our &lt;a href="https://github.com/ordercloud-api/OrderCloud-CSharp-
SDK"&gt;existing C# SDK&lt;/a&gt;. Please don't hesitate to contact us with any questions.&lt;/p&gt;</content><category term="csharp"></category></entry></feed>