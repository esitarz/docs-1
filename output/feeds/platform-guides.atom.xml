<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - Platform Guides</title><link href="/" rel="alternate"></link><link href="/feeds/platform-guides.atom.xml" rel="self"></link><id>/</id><updated>2018-03-19T15:32:44+00:00</updated><entry><title>Authentication: Anonymous Shopping</title><link href="/authentication-anonymous-shopping.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/authentication-anonymous-shopping.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Anonymous Shopping, or Guest Checkout, is when a user is enabled to browse a
catalog of products and/or checkout without registering themselves.
Accomplishing this requires OrderCloud.io developers to pull together a lot of
platform knowledge. We'll summarize that information here.&lt;/p&gt;
&lt;h2&gt;Configuring the Application&lt;/h2&gt;
&lt;p&gt;An anonymous buyer experience …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Anonymous Shopping, or Guest Checkout, is when a user is enabled to browse a
catalog of products and/or checkout without registering themselves.
Accomplishing this requires OrderCloud.io developers to pull together a lot of
platform knowledge. We'll summarize that information here.&lt;/p&gt;
&lt;h2&gt;Configuring the Application&lt;/h2&gt;
&lt;p&gt;An anonymous buyer experience must work within a given buyer user perspective
- otherwise OrderCloud.io has no context for determining data the anonymous
user has access to, like product and pricing information. Therefore, you will
need an active buyer user before we can proceed.&lt;/p&gt;
&lt;p&gt;Once you've done that, navigate to the Dashboard and click on the &lt;strong&gt;Buyer
Organizations&lt;/strong&gt; tab from the left hand nav and select your buyer organization
by clicking on the name. From there click on the application associated with
your Buyer Organization.&lt;/p&gt;
&lt;p&gt;Next, we will add an &lt;strong&gt;Anonymous Template User&lt;/strong&gt;. This will be the user that
all anonymous users will inherit security and assignments from.&lt;/p&gt;
&lt;p&gt;![Anonymous-Template-User]({filename}/images/docs-guides/authentication/anonymous-
template-user.jpg)&lt;/p&gt;
&lt;h2&gt;Authenticating Anonymous Users&lt;/h2&gt;
&lt;p&gt;Once your application is set up with a template user, we're ready to
authenticate anonymously. Using the Client Credentials grant-type and only a
client_id, make a request to the OrderCloud.io OAuth server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;scope=ProductReader CategoryReader MeAddressAdmin MeCreditCardAdmin&amp;amp;grant_type=client_credentials
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will receive a standard OAuth response that contains an access_token you
can use for the duration of the anonymous shopping experience.&lt;/p&gt;
&lt;p&gt;Anonymous access_tokens have a fixed duration of &lt;strong&gt;1 week&lt;/strong&gt; , access token
duration has no affect on anonymous users. Refresh tokens &lt;strong&gt;are not
available&lt;/strong&gt; to anonymous users.&lt;/p&gt;
&lt;p&gt;It is important to note that while it is possible to fully submit an order
using this token, there isn't a secure way to let the anonymous user view
historical order data. If this is required for your project, you should
consider profiling your users at some point before submitting an order.&lt;/p&gt;
&lt;h2&gt;Profiling Anonymous Users&lt;/h2&gt;
&lt;p&gt;Prompting your anonymous shoppers to profile themselves before checking out
ensures that historical order data can be captured so the user can view it
when they return to your site. When you choose to profile users doesn't
matter, it can happen before or after they create an order. Order information
created during the anonymous access_token's life-cycle will transfer to the
newly profiled user automatically.&lt;/p&gt;
&lt;p&gt;The request is relatively simple: provide the anonymous access_token for the
&lt;code&gt;tempUserToken&lt;/code&gt; and the request body should contain the profile information
filled out by the anonymous user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST https://api.ordercloud.io/v1/me/register HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json


{
  &amp;quot;ID&amp;quot;: &amp;quot;NewUserName&amp;quot;,
  &amp;quot;Username&amp;quot;: &amp;quot;MyUserName&amp;quot;,
  &amp;quot;FirstName&amp;quot;: &amp;quot;John&amp;quot;,
  &amp;quot;LastName&amp;quot;: &amp;quot;Doe&amp;quot;,
  &amp;quot;Email&amp;quot;: &amp;quot;user@email.com&amp;quot;,
  &amp;quot;Phone&amp;quot;: &amp;quot;555-555-5555&amp;quot;,
  &amp;quot;TermsAccepted&amp;quot;: true,
  &amp;quot;Active&amp;quot;: true,
  &amp;quot;xp&amp;quot;: null
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar to the OAuth 2.0 Response, you will receive an access_token after
profiling the user. At this point, remove the anonymous access_token and
continue forward with the profiled user's access_token.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Authentication: Developer Access</title><link href="/authentication-developer-access.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/authentication-developer-access.html</id><summary type="html">&lt;h2&gt;__Developer Access&lt;/h2&gt;
&lt;p&gt;In order to make it easier for developers to get in and start testing
applications we made a unique role called &lt;code&gt;DevCenterImpersonate&lt;/code&gt;. This role
allows you to log into your application with your Dev Center username and
password so you don't have to go through the trouble of …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Developer Access&lt;/h2&gt;
&lt;p&gt;In order to make it easier for developers to get in and start testing
applications we made a unique role called &lt;code&gt;DevCenterImpersonate&lt;/code&gt;. This role
allows you to log into your application with your Dev Center username and
password so you don't have to go through the trouble of creating a user first.&lt;/p&gt;
&lt;p&gt;To take advantage of this feature simply include the role
&lt;code&gt;DevCenterImpersonate&lt;/code&gt; in the scope of your authentication request:&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Authentication: Impersonation</title><link href="/authentication-impersonation.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/authentication-impersonation.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In some instances, you may want to allow a user to order on behalf of another
user. We see this use case a lot in Customer Service Desk and Call Center
scenarios where customers will call their orders in and the service rep places
the order on the customer …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In some instances, you may want to allow a user to order on behalf of another
user. We see this use case a lot in Customer Service Desk and Call Center
scenarios where customers will call their orders in and the service rep places
the order on the customer’s behalf. This workflow preserves the reporting
data, email notifications, and presents the catalog ordering rules the buyer
is configured for.&lt;/p&gt;
&lt;p&gt;The OrderCloud.io API supports this capability by allowing certain users to
make API calls on behalf of a buyer user, which we refer to as impersonation.
If you're an admin user, with the &lt;code&gt;BuyerImpersonation&lt;/code&gt; role you can
impersonate any buyer user under your organizational umbrella as long as an
applicable Impersonation Config has been created. If you're a buyer user with
the &lt;code&gt;BuyerImpersonation&lt;/code&gt; role can impersonate any other buyer user within the
same buyer company as long as an applicable Impersonation Config has been
created.&lt;/p&gt;
&lt;h2&gt;Creating an Impersonation Config&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ImpersonationBuyerID&lt;/code&gt;, &lt;code&gt;ImpersonationGroupID&lt;/code&gt;, and &lt;code&gt;ImpersonationUserID&lt;/code&gt; all
reference the party you want to grant access to do the impersonating. While
&lt;code&gt;BuyerID&lt;/code&gt;, &lt;code&gt;GroupID&lt;/code&gt;, &lt;code&gt;UserID&lt;/code&gt; all reference the party who will be
impersonated. The &lt;code&gt;SecurityProfileID&lt;/code&gt; is the Security Profile you would like
to grant the user doing the impersonating (only while they are impersonating).
&lt;code&gt;ClientID&lt;/code&gt; is the specific application impersonation will be allowed in, if
you need to impersonate in multiple applications, you’ll need to set up
multiple Impersonation Configs.&lt;/p&gt;
&lt;p&gt;API reference: Create Impersonation Config&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST POST https://api.ordercloud.io/v1/impersonationconfig HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json

{
  &amp;quot;ID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;ImpersonationBuyerID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;ImpersonationGroupID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;ImpersonationUserID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;BuyerID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;GroupID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;UserID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;SecurityProfileID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;ClientID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;BuyerID&amp;quot;: &amp;quot;…&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Retrieving the Access Token&lt;/h2&gt;
&lt;p&gt;After you have successfully created an applicable Impersonation Config, the
next step is to retrieve that buyer user's Access Token by using the Users
&lt;code&gt;GetAccessToken&lt;/code&gt; endpoint:&lt;/p&gt;
&lt;p&gt;API reference: Get Access Token&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST https://api.ordercloud.io/v1/buyers/{buyerID}/users/{userID}/accesstoken HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json

{
  &amp;quot;ClientID&amp;quot;: &amp;quot;…&amp;quot;,
  &amp;quot;Roles&amp;quot;: [
    &amp;quot;DevCenterImpersonate&amp;quot;
  ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Subsequent Requests&lt;/h2&gt;
&lt;p&gt;The&lt;code&gt;access_token&lt;/code&gt; from the response will need to be included for each and
every OrderCloud.io API request in the Authorization header prefaced by
&lt;code&gt;Bearer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GET https://api.ordercloud.io/v1/buyers HTTP/1.1
Authentication: Bearer put_access_token_here
Content-Type: application/json
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You should now have a basic understanding of how to impersonate a buyer user
on Ordercloud.io, and when you may need to use this functionality.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Authentication: Oauth2 Workflows</title><link href="/authentication-oauth2-workflows.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/authentication-oauth2-workflows.html</id><summary type="html">&lt;h2&gt;What is OAuth?&lt;/h2&gt;
&lt;p&gt;OAuth is an open standard for authorization commonly used as a way for users
to log into third party websites using Microsoft, Google, Facebook etc.
accounts without exposing their password. It is increasingly becoming an
industry standard for security and permission-based application experiences
and is what we …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is OAuth?&lt;/h2&gt;
&lt;p&gt;OAuth is an open standard for authorization commonly used as a way for users
to log into third party websites using Microsoft, Google, Facebook etc.
accounts without exposing their password. It is increasingly becoming an
industry standard for security and permission-based application experiences
and is what we use at OrderCloud.io. OAuth allows you to configure a total of
four different workflows all of which use the following Method and Request
URL.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;POST&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Required Information&lt;/h2&gt;
&lt;p&gt;All of the information required for an authentication request can be accessed
from your Dashboard.&lt;/p&gt;
&lt;h2&gt;1. Password Grant Type&lt;/h2&gt;
&lt;p&gt;This workflow is most appropriate for client apps where the user is a human,
i.e, a registered OrderCloud.io Buyer or Admin user. A successful
authentication with this workflow requires the following information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client ID&lt;/li&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;li&gt;Username&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grant Type: &lt;code&gt;grant_type=password&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
Content-Type: text/html; charset=UTF-8&lt;/p&gt;
&lt;p&gt;client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;grant_type=password&amp;amp;username=xxxxxxxx&amp;amp;password=xxxxxxxx&amp;amp;scope=Shopper&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2. Client Credentials Grant Type&lt;/h2&gt;
&lt;p&gt;This configuration is best suited for an application where you need a way for
your backend system to log in. It is also appropriate when you are just
getting started and need to seed your application with users who can
subsequently authenticate using the Password Grant type. A successful
authentication with this workflow requires the following information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client ID&lt;/li&gt;
&lt;li&gt;Client Secret&lt;/li&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grant Type: &lt;code&gt;grant_type=client_credentials&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;POST https://auth.ordercloud.io/oauth/token HTTP/1.1
Content-Type: text/html; charset=UTF-8&lt;/p&gt;
&lt;p&gt;client_id=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;amp;grant_type=client_credentials&amp;amp;client_secret=xxxxxxxxxxxxx&amp;amp;scope=FullAccess&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3. Anonymous Shopping or Guest Checkout&lt;/h2&gt;
&lt;p&gt;There are some B2B clients that will want to enable visitors to browse a
catalog of products and/or checkout without registering themselves. We call
this Anonymous Shopping or Guest Checkout. An in-depth guide for this workflow
is detailed here&lt;/p&gt;
&lt;h2&gt;4. Elevated Password Grant Type&lt;/h2&gt;
&lt;p&gt;The final workflow is the same as the Password Grant Type workflow except that
it has an additional requirement of Client Secret. This type of workflow would
be used if you want to add an additional layer of security.&lt;/p&gt;
&lt;p&gt;To use this workflow you will first need to set the Client Secret in the
Dashboard's app tab and include the Client Secret in each request&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;POST&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;oauth&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;

&lt;span class="nt"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;grant_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;client_credentials&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;xxxxxxxxxxxxx&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;FullAccess&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Subsequent Requests&lt;/h2&gt;
&lt;p&gt;A successful authentication (using one of the four workflows) will yield the
following response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
   &amp;quot;access_token&amp;quot;: &amp;quot;eyJ0eXAi0iJKV1QiLCJhbGci0iJ&amp;quot;,
   &amp;quot;token_type&amp;quot; : &amp;quot;bearer&amp;quot;,
   &amp;quot;expires_in&amp;quot; : 35999,
   &amp;quot;refresh_token&amp;quot;: &amp;quot;878ca890-af6a-48b6-98a2-1e1cf4a..&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;access_token&lt;/code&gt; from the response will need to be included in each and
every OrderCloud.io API request as part of the Authorization header prefaced
by &lt;code&gt;Bearer&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;GET&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;eyJ0eXAi0iJKV1QiLCJhbGci0iJ9&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You should now have a basic understanding of the four different OAuth 2
workflows. Each of these workflows return a token which allows you to make
authenticated calls to OrderCloud.io.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Authentication: Refresh Tokens</title><link href="/authentication-refresh-tokens.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/authentication-refresh-tokens.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;You will learn how to set-up and use refresh tokens which will allow your
users to remain signed in without having to reauthenticate. This guide assumes
you already know how to authenticate using one of the four workflows&lt;/p&gt;
&lt;h2&gt;__Understanding Tokens&lt;/h2&gt;
&lt;p&gt;A successful request to authenticate will return a response …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;You will learn how to set-up and use refresh tokens which will allow your
users to remain signed in without having to reauthenticate. This guide assumes
you already know how to authenticate using one of the four workflows&lt;/p&gt;
&lt;h2&gt;__Understanding Tokens&lt;/h2&gt;
&lt;p&gt;A successful request to authenticate will return a response much like the
following.&lt;/p&gt;
&lt;p&gt;In a typical workflow, you will use the access token in any request to the
OrderCloud.io API. When that token expires, you will need to re-authenticate.
The refresh token can be used to retrieve a new access token without needing
user credentials or a client secret.&lt;/p&gt;
&lt;p&gt;If you are planning on retrieving a new access token using this method then
you will want to store that refresh token when first authenticating.&lt;/p&gt;
&lt;p&gt;Although not visible from the response, the refresh token also has an
expiration duration. Once expired, you will no longer be able to request a new
access token using that refresh token. The expiration duration for both the
access and refresh tokens can be changed from the Applications view in the
Dashboard. A refresh token duration of &lt;code&gt;0&lt;/code&gt; will not return a refresh token.&lt;/p&gt;
&lt;h2&gt;__Using a Refresh Token&lt;/h2&gt;
&lt;p&gt;The following information will be needed for the request:  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Variable

&lt;/th&gt;  
&lt;th&gt;

Definition

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

grant_type

&lt;/td&gt;  
&lt;td&gt;

Value must be refresh_token

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

client_id

&lt;/td&gt;  
&lt;td&gt;

This will be the client ID used in the original request

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

refresh_token

&lt;/td&gt;  
&lt;td&gt;

This will be the refresh_token from the first response

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;A successful request might look like this:&lt;/p&gt;
&lt;h2&gt;__Conclusion&lt;/h2&gt;
&lt;p&gt;After reading this guide you should now be able to retrieve access tokens by
using refresh tokens. This will allow your users to remain signed in as long
as their refresh token has not expired.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Authentication: Security Profiles</title><link href="/authentication-security-profiles.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/authentication-security-profiles.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Security Profiles are an assortment of roles that give access to specific
endpoints in the OrderCloud.io API. Profiles can be assigned to the users of
your Seller or Buyer application. If a request is made by a user without
sufficient roles they will receive 403 Forbidden response. Configuration …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Security Profiles are an assortment of roles that give access to specific
endpoints in the OrderCloud.io API. Profiles can be assigned to the users of
your Seller or Buyer application. If a request is made by a user without
sufficient roles they will receive 403 Forbidden response. Configuration of
these profiles is possible within the Security Profiles view in the
OrderCloud.io Dashboard.&lt;/p&gt;
&lt;h2&gt;__Roles&lt;/h2&gt;
&lt;p&gt;Security Profiles are made up of a list of roles which fall into one of two
categories: Admin and Reader. An &lt;strong&gt;Admin&lt;/strong&gt; role allows read and write access
while a &lt;strong&gt;Reader&lt;/strong&gt; role type allows only read access.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/authentication/security-profiles.roles.png"&gt;&lt;/p&gt;
&lt;h2&gt;__Assigning Profiles&lt;/h2&gt;
&lt;p&gt;Security Profiles are assigned at the party level (User, User Group, Buyer
Organization or Admin Organization).&lt;/p&gt;
&lt;p&gt;If more than one Security Profile is inherited, the roles will be a union of
the roles from every inherited Security Profile.&lt;/p&gt;</content><category term="authentication"></category></entry><entry><title>Basic Api Features: Conventions</title><link href="/basic-api-features-conventions.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-conventions.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;With few exceptions, the OrderCloud.io API adheres to a RESTful architectural
style. URIs, HTTP verbs, headers, payloads, and response codes all follow
consistent and predictable patterns. This guide will outline conventions that
permeate the entire platform.&lt;/p&gt;
&lt;h2&gt;__SSL Everywhere&lt;/h2&gt;
&lt;p&gt;API access is only allowed via HTTPS; connections on port …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;With few exceptions, the OrderCloud.io API adheres to a RESTful architectural
style. URIs, HTTP verbs, headers, payloads, and response codes all follow
consistent and predictable patterns. This guide will outline conventions that
permeate the entire platform.&lt;/p&gt;
&lt;h2&gt;__SSL Everywhere&lt;/h2&gt;
&lt;p&gt;API access is only allowed via HTTPS; connections on port 80 are refused
entirely. This simplifies the token-based authentication.&lt;/p&gt;
&lt;h2&gt;__JSON Everywhere&lt;/h2&gt;
&lt;p&gt;UTF-8 encoded JSON is currently the only supported data format for both
request and response payloads.&lt;/p&gt;
&lt;h2&gt;__Date Format&lt;/h2&gt;
&lt;p&gt;Dates/times returned in the API are in UTC time and conform to &lt;a href="http://en.wikipedia.org/wiki/ISO_8601"&gt;ISO
8601&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;__OAuth 2&lt;/h2&gt;
&lt;p&gt;OrderCloud API authentication is based on the &lt;a href="http://tools.ietf.org/html/rfc6749"&gt;OAuth 2
specification&lt;/a&gt; and supports four different
workflows, or, in OAuth terms, grant types. Check out our workflows guide to
learn more.&lt;/p&gt;
&lt;h2&gt;__Writeable IDs&lt;/h2&gt;
&lt;p&gt;Writable IDs can be extremely useful for back-office integrations. They can
potentially eliminate the need for a mapping middleware layer.&lt;/p&gt;
&lt;p&gt;Most resources that map to an entity of some sort (Orders, Users, Addresses,
etc.) contain an ID that is optionally writable on creation or update. If you
do not pass one, one will be auto-generated and returned in the response, and
will be guaranteed to be unique. If you choose to pass an ID, you are
responsible for ensuring uniqueness. Things that live under the context of a
single Buyer need only be unique within that context. Things that are shared
(such as products) must be unique across the entire Admin organization.&lt;/p&gt;
&lt;h2&gt;__Error Handling&lt;/h2&gt;
&lt;p&gt;For all unsuccessful requests, we attempt to return the &lt;a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error"&gt;most appropriate HTTP
status in the 400
range&lt;/a&gt;.
Only when something goes terribly wrong on our end will you get a 500
response. And so long as our platform is responding (i.e. returing anything in
the 4xx range or 500), you can count on the response body taking a standard
shape.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Errors</title><link href="/basic-api-features-errors.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-errors.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;OrderCloud.io uses conventional HTTP response codes to indicate success or
failure of an API request. In general, codes in the &lt;code&gt;2xx&lt;/code&gt; range indicate
success and codes in the &lt;code&gt;4xx&lt;/code&gt; range indicate an error failed given the
information provided (e.g., a required parameter). Only when something goes
terribly …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;OrderCloud.io uses conventional HTTP response codes to indicate success or
failure of an API request. In general, codes in the &lt;code&gt;2xx&lt;/code&gt; range indicate
success and codes in the &lt;code&gt;4xx&lt;/code&gt; range indicate an error failed given the
information provided (e.g., a required parameter). Only when something goes
terribly wrong on our end will you receive a &lt;code&gt;500&lt;/code&gt; response. As long as the
platform is responding you can count on the response body taking a standard
shape.&lt;/p&gt;
&lt;h2&gt;__HTTP Status Code Summary&lt;/h2&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Status Code

&lt;/th&gt;  
&lt;th&gt;

Suggested Course of Action

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

200 - OK

&lt;/td&gt;  
&lt;td&gt;

Everything worked as expected. No action required.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

201 - Created

&lt;/td&gt;  
&lt;td&gt;

Something has been successfully created. No action required.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

204 - No Content

&lt;/td&gt;  
&lt;td&gt;

The server has successfully fulfilled the request. No action required.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

401 - Unauthorized

&lt;/td&gt;  
&lt;td&gt;

The user is not authorized to make a call to the API. Check that user
credentials are valid.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

403 - Forbidden

&lt;/td&gt;  
&lt;td&gt;

The user's Security Profile does not have the necessary roles to make the API
call. Update Security Profile to include valid roles for the call.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

404 - Not Found

&lt;/td&gt;  
&lt;td&gt;

The requested resource was not found. A common reason for this is a bad
request.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

500 - Internal Server Error

&lt;/td&gt;  
&lt;td&gt;

There was a server-side issue. Please contact us if you encounter this error
code.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Extended Properties</title><link href="/basic-api-features-extended-properties.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-extended-properties.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The reality of all enterprise platforms is the need to customize the data
model. To accommodate this, OrderCloud.io designed a property called Extended
Properties (XP) to allow enterprise customization of the OrderCloud data
model. OrderCloud.io exposes the &lt;code&gt;{ xp: {} }&lt;/code&gt; property on most resources
allowing you to apply JSON …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The reality of all enterprise platforms is the need to customize the data
model. To accommodate this, OrderCloud.io designed a property called Extended
Properties (XP) to allow enterprise customization of the OrderCloud data
model. OrderCloud.io exposes the &lt;code&gt;{ xp: {} }&lt;/code&gt; property on most resources
allowing you to apply JSON objects. The JSON object can be as complex and
deeply-nested as necessary. Additionally, the XP property is available for
filtering, sorting and searching in all list endpoints. Extended Properties
allows you to overcome platform rigidity. So, to optimize the use of our data
model, and to help you fully implement your B2B scenarios, we created a
schema-less solution with XP and exposed it on virtually every API resource.
We may not have &lt;code&gt;Product.YourSpecialDataPoint&lt;/code&gt;, but we do have
&lt;code&gt;Product.xp.YourSpecialDataPoint&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Add, Update and Remove XP&lt;/h2&gt;
&lt;p&gt;The entire XP object must be &lt;strong&gt;8000 bytes&lt;/strong&gt; or less and must be a valid JSON
object. Any key-value pairs of numbers, strings, booleans, arrays, and even
other objects can be used.&lt;/p&gt;
&lt;h2&gt;Adding XP&lt;/h2&gt;
&lt;p&gt;Let's say one of the requirements for your solution includes storing the age
and gender of users. You can accomplish this by storing those data points in
the user's XP. If you do not include JSON, XP will be set to null by default
on all parent objects. To declare XP, simply replace the null value with the
valid JSON.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;POST&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;newbuyer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;put_access_token_here&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Username&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;janesmith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Password&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;test12345&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;FirstName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Jane&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;LastName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Smith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Email&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;jsmith@company.com&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Phone&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;555-555-5555&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;TermsAccepted&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;null,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Active&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;true,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;xp&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;&amp;quot;Gender&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Female&amp;quot;,&lt;/span&gt;
   &lt;span class="err"&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;26&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;SecurityProfileID&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FullAccess&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Nesting XP&lt;/h2&gt;
&lt;p&gt;Let's say requirements have shifted and the solution now requires the ability
to store information about the user's employment details, specifically job
title and department. This can easily be accomplished using nested objects
within XP.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;PUT&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;newbuyer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;userID&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;put_access_token_here&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Username&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;janesmith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Password&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;test12345&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;FirstName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Jane&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;LastName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Smith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Email&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;jsmith@company.com&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Phone&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;555-555-5555&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;TermsAccepted&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;null,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Active&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;true,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;xp&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;Gender&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Female&amp;quot;,&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;26,&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;EmploymentDetails&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
           &lt;span class="err"&gt;&amp;quot;Position&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Developer&amp;quot;,&lt;/span&gt;
           &lt;span class="err"&gt;&amp;quot;Department&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Tech&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;SecurityProfileID&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FullAccess&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Modifying XP&lt;/h2&gt;
&lt;p&gt;Now let's say Jane Smith receives a promotion. To update her job title we can
use &lt;code&gt;PATCH&lt;/code&gt; to modify the relevant data. Instead of sending the entire user
object, we can send the XP key and the object that we want to update, the
other XP (gender and age) will persist.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;PUT&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;newbuyer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;userID&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;put_access_token_here&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;&amp;quot;xp&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;&amp;quot;EmploymentDetails&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
       &lt;span class="err"&gt;&amp;quot;Position&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Senior&lt;/span&gt; &lt;span class="err"&gt;Developer&amp;quot;,&lt;/span&gt;
       &lt;span class="err"&gt;&amp;quot;Department&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Tech&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Deleting XP&lt;/h2&gt;
&lt;p&gt;The only way to remove a specific xp from your resource is to use the Update
(PUT) method. First GET the resource, then copy the response body returned,
paste it into your PUT request and omit the xp key/value you wish to remove.
Alternatively, if you don’t need it actually deleted, you are able to set any
xp’s value to null. In the example below, we're removing the "Age" xp from
this user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;GET&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;newbuyer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;userID&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;put_access_token_here&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Username&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;janesmith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Password&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;test12345&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;FirstName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Jane&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;LastName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Smith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Email&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;jsmith@company.com&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Phone&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;555-555-5555&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;TermsAccepted&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;null,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Active&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;true,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;xp&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;Gender&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Female&amp;quot;,&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;Age&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;26,&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;EmploymentDetails&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
           &lt;span class="err"&gt;&amp;quot;Position&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Developer&amp;quot;,&lt;/span&gt;
           &lt;span class="err"&gt;&amp;quot;Department&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Tech&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, use the response body from the request above (without the xp you wish to
remove):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;UPDATE&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;newbuyer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;userID&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;put_access_token_here&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Username&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;janesmith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Password&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;test12345&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;FirstName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Jane&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;LastName&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Smith&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Email&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;jsmith@company.com&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Phone&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;555-555-5555&amp;quot;,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;TermsAccepted&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;null,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;Active&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;true,&lt;/span&gt;
 &lt;span class="err"&gt;&amp;quot;xp&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;Gender&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Female&amp;quot;,&lt;/span&gt;
         &lt;span class="err"&gt;&amp;quot;EmploymentDetails&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
           &lt;span class="err"&gt;&amp;quot;Position&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Developer&amp;quot;,&lt;/span&gt;
           &lt;span class="err"&gt;&amp;quot;Department&amp;quot;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;Tech&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Searching on XP&lt;/h2&gt;
&lt;p&gt;Not only can XP be used to extend the functionality of your application, but
you can use filters to search for indexed xp values on any given resource.
After all, how much benefit would XP provide if you couldn't query a subset of
objects based on a specific XP value? All of the filtering capabilities that
apply to regular values on OrderCloud.io objects also apply to XP values. This
means you can search with all of the standard operators available
(&lt;code&gt;=&lt;/code&gt;,&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;). Below is an example of filtering for a deeply nested value in
XP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;GET&lt;/span&gt; &lt;span class="nt"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ordercloud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;buyers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;newbuyer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;users&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;xp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EmploymentDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Department&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;Tech&lt;/span&gt; &lt;span class="nt"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;
&lt;span class="nt"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Bearer&lt;/span&gt; &lt;span class="nt"&gt;put_access_token_here&lt;/span&gt;
&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;json&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;UTF-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how the dot (".") notation is used in the query string to filter on the
specified deeply nested XP field. Check out the searching, filtering and
sorting guides to learn more about querying.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;XP is a very powerful feature to extend the capabilities of your application.
It provides the flexibility developers need to meet challenging requirements,
giving you the ability to provide a highly customized solutions. Head over to
the API Console to try it for yourself!&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Filtering</title><link href="/basic-api-features-filtering.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-filtering.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The items from such a call could very well be in the thousands so
being able to narrow down the range of the items returned is critical, this
can be done with the use of filters …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The items from such a call could very well be in the thousands so
being able to narrow down the range of the items returned is critical, this
can be done with the use of filters.&lt;/p&gt;
&lt;h2&gt;__Filtering On XP&lt;/h2&gt;
&lt;p&gt;Let's examine a common scenario of filtering on an extended property (XP)
field. Suppose our XP field looks like this:&lt;/p&gt;
&lt;p&gt;We can use dot notation to access deeply nested values. The following call
will return all buyers with team name "Tigers"&lt;/p&gt;
&lt;h2&gt;__Fuzzy Searches&lt;/h2&gt;
&lt;p&gt;Fuzzy matches are supported using the &lt;code&gt;*&lt;/code&gt; wildcard character.&lt;/p&gt;
&lt;p&gt;This will return both "John Smith" and "Johnny McSmooth".&lt;/p&gt;
&lt;h2&gt;__Logical OR&lt;/h2&gt;
&lt;p&gt;You can also use &lt;code&gt;|&lt;/code&gt; as a logical OR.&lt;/p&gt;
&lt;p&gt;This will return "John Smith", "Johnny Jones", and "John Johnson". Maybe you
want "John Smith" but not "John Jones".&lt;/p&gt;
&lt;h2&gt;__Negate and Logical AND&lt;/h2&gt;
&lt;p&gt;You can negate your conditions by prefixing them with &lt;code&gt;!&lt;/code&gt;, and logically &lt;code&gt;AND&lt;/code&gt;
them together by simply providing the same parameter multiple times.&lt;/p&gt;
&lt;p&gt;This will return all users &lt;em&gt;except&lt;/em&gt; those with last name "Smith" or "Jones".&lt;/p&gt;
&lt;h2&gt;__Comparison Operators&lt;/h2&gt;
&lt;p&gt;Dates and numeric values support &lt;code&gt;&amp;gt;&lt;/code&gt; (greater than) and &lt;code&gt;&amp;lt;&lt;/code&gt; (less than)
prefixes.&lt;/p&gt;
&lt;p&gt;For a more advanced example, let's say you want users whose ID is the range of
0 to 9 inclusive. Ranges are not directly supported, but you can use the
existing features to achieve this.&lt;/p&gt;
&lt;p&gt;Of course that's not going to be feasible if the range is very large or you're
dealing with floating-point numbers. A better way would be to leverage &lt;code&gt;&amp;gt;&lt;/code&gt; and
&lt;code&gt;&amp;lt;&lt;/code&gt;, but we want the range to be inclusive, and there are no &lt;code&gt;&amp;gt;=&lt;/code&gt; or &lt;code&gt;&amp;lt;=&lt;/code&gt;
operators. We can however leverage the &lt;code&gt;!&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;Here we're saying "give me all users whose ID is not less than 0 and not
greater than 9", which is effectively equivalent to our 0-9 range.&lt;/p&gt;
&lt;h2&gt;__Performance Considerations&lt;/h2&gt;
&lt;p&gt;Your data is highly indexed for fast retrieval using any of the methods above,
including deep XP object graphs. However, there are a few things to keep in
mind to keep search and listing functionality efficient. Filters with many
&lt;code&gt;OR&lt;/code&gt; conditions or with values that start with the &lt;code&gt;*&lt;/code&gt; wildcard character may
be particularly performance-sensitive. The larger the set of data, the more
likely you are to notice any performance impact. It pays to know the data
model well, and use grouping constructs like User Groups and Categories
effectively.&lt;/p&gt;
&lt;h2&gt;__Combining Queries&lt;/h2&gt;
&lt;p&gt;Filtering can be mixed and matched with Searching and Sorting to give you
ultimate control when defining what is returned from a list.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Http Methods</title><link href="/basic-api-features-http-methods.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-http-methods.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;A resource is a set of endpoints used to interact with an object of that same
name. OrderCloud.io adheres to RESTful conventions in its usage of HTTP verbs.
You can expect a subset of the following methods to exist on every Resource.&lt;/p&gt;
&lt;h2&gt;__HTTP Methods&lt;/h2&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

OrderCloud.io Verb

&lt;/th&gt;  
&lt;th&gt;

HTTP …&lt;/th&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;A resource is a set of endpoints used to interact with an object of that same
name. OrderCloud.io adheres to RESTful conventions in its usage of HTTP verbs.
You can expect a subset of the following methods to exist on every Resource.&lt;/p&gt;
&lt;h2&gt;__HTTP Methods&lt;/h2&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

OrderCloud.io Verb

&lt;/th&gt;  
&lt;th&gt;

HTTP Verb

&lt;/th&gt;  
&lt;th&gt;

Meaning

&lt;/th&gt;  
&lt;th&gt;

Example

&lt;/th&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

GET

&lt;/td&gt;  
&lt;td&gt;

GET

&lt;/td&gt;  
&lt;td&gt;

Returns a specific item

&lt;/td&gt;  
&lt;td&gt;

Get a single address

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

CREATE/REPLACE

&lt;/td&gt;  
&lt;td&gt;

PUT

&lt;/td&gt;  
&lt;td&gt;

Create or replace an item, you provide a unique ID

&lt;/td&gt;  
&lt;td&gt;

Create address ABC, overwriting it if it already exists

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

UPDATE

&lt;/td&gt;  
&lt;td&gt;

PATCH

&lt;/td&gt;  
&lt;td&gt;

Use it for updating items

&lt;/td&gt;  
&lt;td&gt;

Update the name on an address by providing the new name

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

LIST

&lt;/td&gt;  
&lt;td&gt;

GET

&lt;/td&gt;  
&lt;td&gt;

Returns a list of items

&lt;/td&gt;  
&lt;td&gt;

Get a list of addresses

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

CREATE

&lt;/td&gt;  
&lt;td&gt;

POST

&lt;/td&gt;  
&lt;td&gt;

Creates a new item, we generate a unique ID if no ID is provided

&lt;/td&gt;  
&lt;td&gt;

Create a new address

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;td&gt;

DELETE

&lt;/td&gt;  
&lt;td&gt;

DELETE

&lt;/td&gt;  
&lt;td&gt;

Deletes an item

&lt;/td&gt;  
&lt;td&gt;

Delete address ABC from the database

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Pagination</title><link href="/basic-api-features-pagination.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-pagination.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. These resources can potentially include thousands of items so
restricting the data that is returned from such a request is not only
practical but necessary. OrderCloud.io offers server-side pagination that
partitions the data returned from …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. These resources can potentially include thousands of items so
restricting the data that is returned from such a request is not only
practical but necessary. OrderCloud.io offers server-side pagination that
partitions the data returned from these requests into manageable chunks to
optimize client-side performance&lt;/p&gt;
&lt;h2&gt;__Listing&lt;/h2&gt;
&lt;p&gt;A request to list a resource will return an object with two values: &lt;code&gt;Meta&lt;/code&gt; and
&lt;code&gt;Items&lt;/code&gt;. The &lt;code&gt;Meta&lt;/code&gt; value returns important information regarding your query,
such as total results, how many results are shown in the Items array, how many
more pages of results there are, and what page you are currently on. The Items
array stores the actual results of the resource you are querying.&lt;/p&gt;
&lt;p&gt;Lists default to 20 items per page, but you can set the &lt;code&gt;pageSize&lt;/code&gt; up to 100.
If you have more results than the page count, you will have multiple pages.
You can use the &lt;code&gt;Page&lt;/code&gt; and &lt;code&gt;PageSize&lt;/code&gt; values from the &lt;code&gt;Meta&lt;/code&gt; object to specify
the page (starting at 1) and items per page. Note that unlike the page
parameter, &lt;code&gt;ItemRange&lt;/code&gt; values are zero-based.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Searching</title><link href="/basic-api-features-searching.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-searching.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Searching data client side can be fine for smaller sets of data but can
quickly become unwieldy with large sets of data. To address this issue our API
supports server side search queries that do all of the heavy lifting for you.&lt;/p&gt;
&lt;h2&gt;__Searching&lt;/h2&gt;
&lt;p&gt;For open-ended, Google-esque searches, simply provide …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Searching data client side can be fine for smaller sets of data but can
quickly become unwieldy with large sets of data. To address this issue our API
supports server side search queries that do all of the heavy lifting for you.&lt;/p&gt;
&lt;h2&gt;__Searching&lt;/h2&gt;
&lt;p&gt;For open-ended, Google-esque searches, simply provide a search term.&lt;/p&gt;
&lt;p&gt;Request&lt;/p&gt;
&lt;p&gt;This will return all results containing "smith", including "Smith",
"Smithers", and "McSmith". The fields searched include &lt;code&gt;FirstName&lt;/code&gt;,&lt;code&gt;LastName&lt;/code&gt;,
and &lt;code&gt;UserName&lt;/code&gt;. (This of course varies from endpoint to endpoint. View each
endpoint's documentation for specific details). Fields marked “Searchable” in
the API reference will be searched.&lt;/p&gt;
&lt;p&gt;You can optionally specify which fields (of the searchable fields available)
are searched by providing a &lt;code&gt;searchOn&lt;/code&gt; parameter for any field available on
the resource you're searching.&lt;/p&gt;
&lt;h2&gt;__Combining Queries&lt;/h2&gt;
&lt;p&gt;Searching can be mixed and matched with Sorting and Filtering to give you
ultimate control when defining what is returned from a list.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Basic Api Features: Sorting</title><link href="/basic-api-features-sorting.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/basic-api-features-sorting.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The results returned from a list method have a default sort order,
but you can also specify a sort order. Properties marked as “Sortable” in the
API Reference can be sorted on.&lt;/p&gt;
&lt;h2&gt;__Sorting&lt;/h2&gt;
&lt;p&gt;Perhaps you want …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;Most OrderCloud.io Resources include a method for listing items from that
Resource. The results returned from a list method have a default sort order,
but you can also specify a sort order. Properties marked as “Sortable” in the
API Reference can be sorted on.&lt;/p&gt;
&lt;h2&gt;__Sorting&lt;/h2&gt;
&lt;p&gt;Perhaps you want to sort the results by the Last Name of the person who placed
an order. To do this you can simply include the &lt;code&gt;sortBy&lt;/code&gt; parameter for the
field you would like to sort by.&lt;/p&gt;
&lt;h2&gt;__Combining Queries&lt;/h2&gt;
&lt;p&gt;Sorting can be mixed and matched with Searching and Filtering to give you
ultimate control when defining what is returned from a list.&lt;/p&gt;</content><category term="basic api features"></category></entry><entry><title>Core Concepts: Assignments</title><link href="/core-concepts-assignments.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/core-concepts-assignments.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;There are basic principles around how assignments work that are critical to
understanding our data model and more importantly how the data model can be
applied to solve the most complex ordering scenarios.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assignments are used to define relationships&lt;/li&gt;
&lt;li&gt;Assignments are inclusive&lt;/li&gt;
&lt;li&gt;Assignments can be made at different levels …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;There are basic principles around how assignments work that are critical to
understanding our data model and more importantly how the data model can be
applied to solve the most complex ordering scenarios.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assignments are used to define relationships&lt;/li&gt;
&lt;li&gt;Assignments are inclusive&lt;/li&gt;
&lt;li&gt;Assignments can be made at different levels depending on the resource&lt;/li&gt;
&lt;li&gt;Assignments may include configuration data&lt;/li&gt;
&lt;li&gt;Assignments cascade down higher levels to the individual user (except pricing)&lt;/li&gt;
&lt;li&gt;Assignments are many to many&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;__Assignments are Used to Define Relationships&lt;/h2&gt;
&lt;p&gt;When you are saving an assignment you are creating a relationship between a
single resource (address, spending account, etc.) and a buyer party(user, user
group, or buyer company). There is one exception to this binary rule, which is
product assignment. The product assignment is a three-way association between
a product, a buyer party and a price schedule.&lt;/p&gt;
&lt;h2&gt;__Assignments are Inclusive&lt;/h2&gt;
&lt;p&gt;When a buyer user is created they exist in a vacuum. The user will not have
access to any objects until an assignment is made to them directly, or through
a higher level party assignment.&lt;/p&gt;
&lt;h2&gt;__Assignments Can be Made at Different Levels&lt;/h2&gt;
&lt;p&gt;Assignments can be made to either the entire buyer company, a specific group
of users (UserGroup) within that buyer company or for some resources a single
buyer user.&lt;/p&gt;
&lt;p&gt;You may notice that some assignments contain configuration options. These
options allow you to provide additional information about the assignment. For
example, when assigning an address to a user, you can set IsShipping &amp;amp;
IsBilling, these properties control whether the address can be used as a
shipping and/or billing address on an order.&lt;/p&gt;
&lt;h2&gt;__Assignments Cascade Down Higher Levels to the Individual User&lt;/h2&gt;
&lt;p&gt;When the platform is looking for what a given buyer user has access to, it is
checking for assignments. If an assignment is made to a buyer then all the
users that exist in that buyer organization have access to the assigned
object. The same principle applies to user groups and their constituent users.
Regardless of where an assignment is saved, all of these objects are presented
to the buyer user seamlessly and in a very flat structure.&lt;/p&gt;
&lt;p&gt;The three-way product assignment is the exception to this, in that case the
most specific pricing assignment will apply. For example, if you have a
product assignment at the buyer level, but you would like a specific group of
users to have different pricing, you could make an additional product
assignment that included a UserGroupID and users assigned to that group would
no longer see the buyer level pricing.&lt;/p&gt;
&lt;p&gt;The scenario you’ll want to avoid is a user with multiple product assignments
of the same specificity party level (e.g. a user belonging to two user groups,
each with different product assignments). While the platform won’t prohibit
you from making these potentially problematic assignments, the pricing
returned for any user belonging to multiple pricing groups will always be
indeterminate.&lt;/p&gt;
&lt;h2&gt;__Assignments are Many to Many&lt;/h2&gt;
&lt;p&gt;Resources can be assigned to many different buyer parties. Those buyer parties
can be assigned to many other resources. For example, one user can be assigned
to multiple address while one address can be assigned to multiple users.&lt;/p&gt;</content><category term="core concepts"></category></entry><entry><title>Core Concepts: Rules Engine</title><link href="/core-concepts-rules-engine.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/core-concepts-rules-engine.html</id><summary type="html">&lt;h2&gt;__Introduction&lt;/h2&gt;
&lt;p&gt;What’s a rules engine? It’s a system that executes rules. Okay...so what’s a
rule? In its simplest form, it’s an if-then statement that is provided from
the outside, rather than being “baked in” to the engine itself. In the case of
OrderCloud.io, we …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Introduction&lt;/h2&gt;
&lt;p&gt;What’s a rules engine? It’s a system that executes rules. Okay...so what’s a
rule? In its simplest form, it’s an if-then statement that is provided from
the outside, rather than being “baked in” to the engine itself. In the case of
OrderCloud.io, we’ll define the “thens” (starting with “order requires
approval”) and allow you to define the “ifs” via custom &lt;strong&gt;logic expressions&lt;/strong&gt;.
Effectively, we’re going to allow you to extend platform behavior in much the
same way xp allows you to extend the data model.&lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;p&gt;Say you want every order over $200 with some specific xp value to require
approval from a manager. You would first create a UserGroup containing all
approving managers, then create a new ApprovalRule, set the ApprovingGroupID,
and set the Expression to this:&lt;/p&gt;
&lt;h2&gt;__Supported Operations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt; supports the same properties as the Order model returned from /orders API endpoints, including xp.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; comparison operators are supported.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; logical operators are supported&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; mathematical operators are supported&lt;/li&gt;
&lt;li&gt;String values must be enclosed in single quotes.&lt;/li&gt;
&lt;li&gt;Date values must be enclosed in # symbols, i.e #5/15/2016#&lt;/li&gt;
&lt;li&gt;Parentheses may be used to enclose sub-expressions and control order of execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;__Line Item Control&lt;/h2&gt;
&lt;p&gt;What about line items? Glad you asked, because which products are being
purchased, in what quantities, charged against which cost centers, etc, are
very common in the world of approval rules. But line items are a collection,
so we turn to aggregate functions to inspect them. Here’s how you would
require approval on all orders over $200 charged to cost center ABC:&lt;/p&gt;
&lt;p&gt;That’s pretty powerful, but it’s more likely that you only care about the
&lt;em&gt;subtotal&lt;/em&gt; of just the line items matching your CostCenter condition. For this
you can use the &lt;code&gt;items.total&lt;/code&gt; function:&lt;/p&gt;
&lt;p&gt;The condition inside the function (called a filter) can be more complex and
contain &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, etc. just like other parts of the expression:&lt;/p&gt;
&lt;p&gt;It also has access to a special filter that allows you check whether a product
is in a certain category:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;items&lt;/code&gt; supports a total of four functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;items.any&lt;/code&gt; (true if any item matches filter)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items.all&lt;/code&gt; (true if all item matches filter)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items.quantity&lt;/code&gt; (compare result to a number)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;items.total&lt;/code&gt; (compare result to a dollar amount)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and one special filter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;product.incategory('mycustomcategory')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;__ComplexApprovals&lt;/h2&gt;
&lt;p&gt;Speaking of functions, there is one defined on &lt;code&gt;order&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;This one’s powerful, because it allows you to set up multi-level approval
workflows by chaining rules together. For example, in a larger organization,
getting the approval from a department manager might not be enough, and a
higher-level VP must also sign off.&lt;/p&gt;
&lt;p&gt;All valid elements of rule expressions can be mixed &amp;amp; matched as needed,
allowing for very sophisticated rules to be supported:&lt;/p&gt;
&lt;p&gt;A word of caution: Rules are easy to write and very powerful, but can be very
tricky to debug when they don’t work quite like you thought they would. Don’t
get more fancy with them than you need to. As always, we’re here to help if
you need guidance.&lt;/p&gt;
&lt;h2&gt;__Where to go from here?&lt;/h2&gt;
&lt;p&gt;You can also leverage the power of the rules engine to create custom
Promotions. Both the promotion EligibleExpression and ValueExpression accept
expressions just like the ones described above. Here are some other things we
may leverage the rules engine for in the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom validation (upon creating/editing things)&lt;/li&gt;
&lt;li&gt;Time-based approval rules (aggregated totals over past week/month/quarter, etc.)&lt;/li&gt;
&lt;li&gt;Applying discounts/markups&lt;/li&gt;
&lt;li&gt;Replenish inventory&lt;/li&gt;
&lt;li&gt;Fire off a notification via webhooks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’d love to get your thoughts on these ideas. Look for significant
enhancements to the rules engine and new applications of it in the months
ahead.&lt;/p&gt;</content><category term="core concepts"></category></entry><entry><title>Getting Started: Introduction To Ordercloud</title><link href="/getting-started-introduction-to-ordercloud.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/getting-started-introduction-to-ordercloud.html</id><summary type="html">&lt;h2&gt;__What is OrderCloud.io?&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;OrderCloud.io is a cloud-hosted B2B eCommerce platform exposed entirely via a
RESTful API. It enables rapid development of custom, secure, and scalable B2B
eCommerce solutions. Spin up a fully functional B2B app in minutes and
customize it to limits of your imagination.&lt;/p&gt;
&lt;h3&gt;Benefits of …&lt;/h3&gt;</summary><content type="html">&lt;h2&gt;__What is OrderCloud.io?&lt;/h2&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;OrderCloud.io is a cloud-hosted B2B eCommerce platform exposed entirely via a
RESTful API. It enables rapid development of custom, secure, and scalable B2B
eCommerce solutions. Spin up a fully functional B2B app in minutes and
customize it to limits of your imagination.&lt;/p&gt;
&lt;h3&gt;Benefits of a RESTful API&lt;/h3&gt;
&lt;p&gt;Whether it’s the central hub of a mobile purchasing app or one small piece of
a larger microservices-based solution, the benefits of a RESTful API vs. other
approaches are clear.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/intro/agnostic.jpg"&gt;&lt;/p&gt;
&lt;p&gt;OrderCloud.io enables developers to use their tech stack of choice. Plus,
releases are automatic and non-breaking; there’s a clear, inherent boundary
between our code and yours.&lt;/p&gt;
&lt;p&gt;Nearly all modern web and mobile front-end frameworks are designed to work
well out of the box with JSON-over-HTTP services that follow RESTful patterns.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/intro/scale.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Unlike on-premise solutions, server infrastructure and data security are taken
care of for you. Start small and scale up only as your business usage grows.&lt;/p&gt;
&lt;p&gt;Unlike SaaS products, your ability to customize user interfaces and workflows
is virtually limitless.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;OrderCloud.io plays nicely with other similarly architected services. We are
entering the age of
&lt;a href="http://martinfowler.com/articles/microservices.html"&gt;microservices&lt;/a&gt;, where
best-of-breed solutions are not built from scratch. Rather, they are assembled
from the best parts. Our "part" is B2B eCommerce and Order Management, a
complex domain in which we have spent {{documentation.yearsSinceFounding}}
years building and refining an incredibly rich and flexible data model.&lt;/p&gt;
&lt;h2&gt;__How OrderCloud.io Supports Complex B2B eCommerce&lt;/h2&gt;
&lt;h3&gt;Buyer Organizations and Contracts&lt;/h3&gt;
&lt;p&gt;In B2B, buyer organizations matter more than in B2C. The seller typically
establishes a relationship with the buyer long before the first order is ever
placed. Product catalogs and pricing specific to that buyer are pre-agreed
upon. Users, shipping addresses, cost centers, payment methods, and other
“things” within the organization are generally configured ahead of time.&lt;/p&gt;
&lt;p&gt;OrderCloud.io provides rich support for modeling a typical B2B buyer
organization. Products can be created once and made available for purchase to
any number of buyers, but details such as pricing, inventory, specs, and other
configuration details can be customized per buyer according to their specific
contract.&lt;/p&gt;
&lt;h3&gt;Organizational Structure, Roles, and Visibility&lt;/h3&gt;
&lt;p&gt;People within the buyer organization may play different roles in the
purchasing process and see different things. If one user places an order over
a certain amount, it may require approval from their manager. Another user in
a branch office may only see that office’s address in their shipping options.
Still another may have the ability to administer users, addresses, or even
products.&lt;/p&gt;
&lt;p&gt;OrderCloud.io provides fine-grained control over specific roles and
visibility. Roles and “things” belonging to the organization are assigned at
user, group, or organization level. Groups provide a powerful and flexible way
to organize users by role, department, location, or any other set of common
traits. Users can belong to any number of groups, and will “inherit” roles and
visibility of things based on their group memberships. This greatly simplifies
administration as the number of users in the organization grows.&lt;/p&gt;
&lt;h3&gt;Custom (But Fast) Buying Experience&lt;/h3&gt;
&lt;p&gt;Multi-tiered assignments of roles and other things comprise a powerful
mechanism for customizing the buyer experience down to the individual user.
But once configured, the shopper (and developer for that matter) wants a fast
and intuitive experience that’s more concerned with what they see than how
they see it.&lt;/p&gt;
&lt;p&gt;OrderCloud.io provides a group of endpoints, commonly referred to as the
&lt;strong&gt;Me&lt;/strong&gt; routes, whose main job it is to flatten these assignments and “just
show me what I can see”, regardless of how the assignments are made
(user/group/organization level). The Me routes greatly simplify the process of
building out the custom buying experience.&lt;/p&gt;
&lt;h3&gt;Complex Products and Pricing&lt;/h3&gt;
&lt;p&gt;Products in the B2B world often come with more detailed specs, configuration
options, and pricing than are typical in B2C.&lt;/p&gt;
&lt;p&gt;OrderCloud.io provides the ability to accurately model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Different pricing for different buyer organizations (or different groups or users within the same organization) &lt;/li&gt;
&lt;li&gt;Buyer-specific variants of the same product&lt;/li&gt;
&lt;li&gt;Quantity based discounts&lt;/li&gt;
&lt;li&gt;Markups/markdowns tied to product buying options, or combinations of options that drive the user to unique SKUs &lt;/li&gt;
&lt;li&gt;Rules-driven promotions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Complex Ordering Processes&lt;/h3&gt;
&lt;p&gt;In B2B, order flow isn’t always as simple as a buyer submitting an order and a
seller fulfilling it. On the buyer side, the order may need to go through a
multi-tier approval process. The rules around what conditions require an
approval (user, order total, specific products, quantities, etc.), who is
allowed to approve, and at what stage in the workflow, can get complex.&lt;/p&gt;
&lt;p&gt;OrderCloud.io’s built-in rules engine allows you to express these rules as
formulas that get evaluated each time an order is submitted or approved. When
an approval triggers no further rules, the order is passed on to the seller.&lt;/p&gt;
&lt;h3&gt;Assisted Ordering&lt;/h3&gt;
&lt;p&gt;Among the primary goals of any eCommerce system are automation and empowering
the buyer. But in B2B, sometimes there’s no substitute for the personalized
service afforded by CSRs (Customer Service Representatives) at call centers.&lt;/p&gt;
&lt;p&gt;OrderCloud.io provides a clear method of impersonating a buyer user. This
allows the CSR to see exactly what that specific user sees and place orders on
their behalf, while protecting sensitive information such as passwords.&lt;/p&gt;
&lt;h3&gt;Integrations&lt;/h3&gt;
&lt;p&gt;Integrating with ERP, CRM, and other external systems is a highly desired
capability in B2B on both the buyer and seller side. The ability to automate
data exchange between these systems and the commerce platform greatly reduces
the costs and errors associated with manual data entry.&lt;/p&gt;
&lt;p&gt;As a RESTful API, OrderCloud.io lends itself equally well to back-end
integrations as it does front-end apps. Webhooks are a powerful mechanism that
allow middleware platforms and custom server applications to subscribe to
events (also via HTTP/JSON but in the reverse direction) that occur within
OrderCloud.io, such as order submitted, item shipped, product changed, etc..&lt;/p&gt;
&lt;h2&gt;__Feature Rich API&lt;/h2&gt;
&lt;p&gt;The OrderCloud.io API has some standard conventions that permeate the entire
platform. You can expect these features to behave the same no matter which
resource you're working with.&lt;/p&gt;
&lt;h3&gt;__SSL&lt;/h3&gt;
&lt;p&gt;API access is only allowed via HTTPS; connections on port 80 are refused
entirely.&lt;/p&gt;
&lt;h3&gt;__JSON Everywhere&lt;/h3&gt;
&lt;p&gt;UTF-8 encoded JSON is the only supported data format for both request and
response payloads.&lt;/p&gt;
&lt;h3&gt;__OAuth 2.0&lt;/h3&gt;
&lt;p&gt;OrderCloud.io API authentication is based on the OAuth 2 specification and
supports multiple workflows.&lt;/p&gt;
&lt;h3&gt;Writable IDs&lt;/h3&gt;
&lt;p&gt;Writable IDs allow you to define the unique identifier of each resource. This
capability eliminates the need to define a master record in your integration.
Your integration efforts are reduced and the opportunity to avoid a mapping
middleware is available. We also offer what we call an incrementor, which is
used to add an atomically incremented number to your object IDs. For example
with the proper configuration, "aprefix-{myIncrementorID}", will yield an
order ID of aprefix-10010.&lt;/p&gt;
&lt;h3&gt;XP&lt;/h3&gt;
&lt;p&gt;We recognize that OrderCloud.io’s core data model can’t cover every
conceivable scenario. Predicting every column in every table that your
hypothetical database might need is impractical. That’s why we created our own
schema-less solution with Extended Properties (most commonly referred to as
“xp”) and exposed it on virtually every API resource. For example, our User
model doesn’t define a Gender attribute, but you can easily add one if you
need it:&lt;/p&gt;
&lt;p&gt;And later you can get a list of all users that are male&lt;/p&gt;
&lt;h3&gt;Advanced Querying&lt;/h3&gt;
&lt;p&gt;Most list endpoints support searching, sorting, filtering, and all list
endpoints support pagination.&lt;/p&gt;
&lt;h3&gt;Webhooks&lt;/h3&gt;
&lt;p&gt;Webhooks allow you to subscribe to any event on any API endpoint. When a
webhook is triggered, a JSON payload will be sent to the configured webhook
URL. They can be used to perform follow up tasks such as updating an external
CRM system when a user updates their profile, or send an email through a 3rd
party system when an order is submitted. Webhooks are fundamentally designed
to provide maximum flexibility within the integrated solution.&lt;/p&gt;
&lt;h2&gt;__Security&lt;/h2&gt;
&lt;p&gt;If facilitating billions of dollars worth of transactions over
{{documentation.yearsSinceFounding}} years in business has taught us one
thing, it's that no shortcuts can be taken when it comes to security. We are
SOC 2 type II and HIPAA Security Rule compliant, and we support the PCI
compliance of applications accessing our API through appropriate security
controls and by using PCI validated platform partners. User credentials are
one-way encrypted such that in the unlikely event of a data breach, they would
be useless. All HTTP traffic is over SSL.&lt;/p&gt;
&lt;p&gt;Authentication is handled by an API independent of the core platform. It
implements four different flows defined by the OAuth2 standard. Access to
specific endpoints and functionality can be restricted at a very granular
level via roles, which are aggregated to form security profiles, which can be
assigned (like many other things) at the company, group, or user level.&lt;/p&gt;
&lt;h2&gt;__Collaboration&lt;/h2&gt;
&lt;p&gt;OrderCloud makes it incredibly easy to collaborate with other developers by
adding them as contributors through the Dashboard. Adding a contributor
developer is as easy as obtaining the email address they used to sign up with
on DevCenter. You can even define how much access you would like them to have
within any given seller organization.&lt;/p&gt;</content><category term="getting started"></category></entry><entry><title>Getting Started: Quick Start Guide</title><link href="/getting-started-quick-start-guide.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/getting-started-quick-start-guide.html</id><summary type="html">&lt;h2&gt;__Getting Started with OrderCloud.io&lt;/h2&gt;
&lt;p&gt;OrderCloud.io is a RESTful API that enables you to create complex, custom B2B
eCommerce solutions.&lt;/p&gt;
&lt;p&gt;This guide is meant to get you started with OrderCloud.io as quickly as
possible. In order to accomplish this, we’ve stripped away some of the detail,
so …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Getting Started with OrderCloud.io&lt;/h2&gt;
&lt;p&gt;OrderCloud.io is a RESTful API that enables you to create complex, custom B2B
eCommerce solutions.&lt;/p&gt;
&lt;p&gt;This guide is meant to get you started with OrderCloud.io as quickly as
possible. In order to accomplish this, we’ve stripped away some of the detail,
so keep an eye out for links to relevant guides that provide much more in-
depth explanations.&lt;/p&gt;
&lt;h2&gt;__Creating an Account&lt;/h2&gt;
&lt;p&gt;The first thing you will need to do is create an account. Registration is free
and gives you access to the entire OrderCloud.io platform.&lt;/p&gt;
&lt;p&gt;After you submit your email address, you will be sent a verification code
which will be required to complete the registration process.&lt;/p&gt;
&lt;h2&gt;__Your First Seller Organization&lt;/h2&gt;
&lt;p&gt;Now that you have an OrderCloud.io account you can navigate to your
&lt;a href="https://dashboard.ordercloud.io"&gt;dashboard&lt;/a&gt; and access your first seller
organization.&lt;/p&gt;
&lt;p&gt;It is the highest level container that encompasses everything else in
OrderCloud.io (applications, products, pricing, users, etc.). You can have
multiple Seller Organizations; however, data is not shared between them.&lt;/p&gt;
&lt;p&gt;Newly created Seller Organizations come with a "default access" application
giving you immediate access to the API however you can also create your own.
To do this first click on the seller applications pane on the left and then
click the  __New button located in the upper right hand corner.&lt;/p&gt;
&lt;p&gt;Using the API Console is the simplest way to start exploring OrderCloud.io;
however, understanding the fundamentals of how to access and use the API on
it's own is extremely important for any OrderCloud.io developer.&lt;/p&gt;
&lt;h2&gt;__Authentication&lt;/h2&gt;
&lt;p&gt;Before you are able to interact with the OrderCloud.io API you will need to
get an &lt;code&gt;access_token&lt;/code&gt; from the auth server. The following sections will
include raw request and response examples to the OAuth API.&lt;/p&gt;
&lt;p&gt;The first thing you need is the &lt;code&gt;ClientID&lt;/code&gt;. This unique identifier represents
a single application on OrderCloud.io. Feel free to use the ClientID from the
"default access" application that was automatically created on your first
Seller Organization.&lt;/p&gt;
&lt;p&gt;![](/{filename}/images/docs-guides/getting-started/quick-start-guide/quick-start-
guide-1.jpg)&lt;/p&gt;
&lt;p&gt;The second thing you will need is a list of roles, or in OAuth terms, scope.
For this example you are not authenticating as an actual user (because we
haven't created one yet). Instead, you will be taking advantage of a useful
developer role, &lt;code&gt;DevCenterImpersonate&lt;/code&gt;". This role will allow you to use the
password grant type workflow with your own Dev Center username and password.&lt;/p&gt;
&lt;p&gt;Along with our special DevCenterImpersonate role we will also request
"FullAccess". Being the owners of this Organization it's safe to say we can
access and change any data related to it. Giving real users "FullAccess" is
highly discouraged, a subset of roles helps protect your application from
malicious attacks or oblivious users.&lt;/p&gt;
&lt;p&gt;Using your ClientID, roles list, and Dev Center username/password, request an
access token following the example below:&lt;/p&gt;
&lt;p&gt;Request&lt;/p&gt;
&lt;p&gt;Response&lt;/p&gt;
&lt;h2&gt;__Subsequent Requests&lt;/h2&gt;
&lt;p&gt;Using the access_token from the OAuth response make your first &lt;code&gt;GET&lt;/code&gt; request
to the UserPerspecive -&amp;gt; Me -&amp;gt; Get endpoint. This will return the details for
the currently authenticated user. (In this case, you will appear as the
default user because we authenticated as a developer). Make sure you put your
&lt;code&gt;access_token&lt;/code&gt; in the Authentication header before making the request.&lt;/p&gt;
&lt;p&gt;Request&lt;/p&gt;
&lt;p&gt;Response&lt;/p&gt;</content><category term="getting started"></category></entry><entry><title>Getting Started: Using The Api Console</title><link href="/getting-started-using-the-api-console.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/getting-started-using-the-api-console.html</id><summary type="html">&lt;h2&gt;__Introduction&lt;/h2&gt;
&lt;p&gt;The OrderCloud.io API Console provides instant access to your OrderCloud
applications. It is extremely useful for rapidly spinning up some data to
develop against or learning about all the different endpoints OrderCloud.io
has to offer.&lt;/p&gt;
&lt;h2&gt;__Getting to the Console&lt;/h2&gt;
&lt;p&gt;The console is available at console.ordercloud.io …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Introduction&lt;/h2&gt;
&lt;p&gt;The OrderCloud.io API Console provides instant access to your OrderCloud
applications. It is extremely useful for rapidly spinning up some data to
develop against or learning about all the different endpoints OrderCloud.io
has to offer.&lt;/p&gt;
&lt;h2&gt;__Getting to the Console&lt;/h2&gt;
&lt;p&gt;The console is available at console.ordercloud.io and can be navigated to via
the top navigation or by clicking "Open API Console" when viewing an
application in the dashboard. If you navigate directly to the console via the
top navigation, you will be prompted to choose a Seller or Buyer application
before continuing.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/getting-started/using-the-api-console/seller-
and-buyer.png)&lt;/p&gt;
&lt;h2&gt;__Current User&lt;/h2&gt;
&lt;p&gt;When first opening the console, you will notice a black box in the top left
that lets you know the user your are currently authenticated as. By default,
the console will open the application using your developer profile - thereby
making you the seller organization's "Default contact user". &lt;strong&gt;This is not a
real user&lt;/strong&gt; , it is simply there to allow developers access to the API before
any real users have been created.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/getting-started/using-the-api-console/current-
user.png)&lt;/p&gt;
&lt;h2&gt;__Current Context&lt;/h2&gt;
&lt;p&gt;Clicking on the Current User will reveal additional details about your current
"context". This includes the active Seller Organization, Buyer Organization
(if any), and application you currently have open in the console. You can
click the blue links to quickly jump back into the OrderCloud.io Dashboard for
each item.&lt;/p&gt;
&lt;p&gt;By clicking "Change Context" you can open a different OrderCloud application
without ever leaving the API Console.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/getting-started/using-the-api-console/current-
context.png)&lt;/p&gt;
&lt;h2&gt;__Impersonation&lt;/h2&gt;
&lt;p&gt;Due to the limited capabilities of the Default Contact User, we have provided
a handy feature for impersonating a &lt;strong&gt;buyer user&lt;/strong&gt; within your current
context. Within the Current User dropdown you can click "Impersonate User" and
fill out the form to find the buyer user you wish to perform API calls on
behalf of.&lt;/p&gt;
&lt;p&gt;By clicking "Change Context" you can open a different OrderCloud application
without ever leaving the API Console.&lt;/p&gt;
&lt;h2&gt;__Lockable Parameters&lt;/h2&gt;
&lt;p&gt;Sometimes you will be making many successive requests with the same
parameters. To make this easier for you, we included the ability to lock
specific parameter values for the duration of your console session. If you
know you'll always be working with the same buyer, enter the Buyer ID
parameter once, click the lock button and forget about it!&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/getting-started/using-the-api-console/lockable-
params.png)&lt;/p&gt;
&lt;h2&gt;__Making Requests&lt;/h2&gt;
&lt;p&gt;Making a request in the API Console is relatively simple. Begin by choosing a
resource from the console menu on the left. Once the resource loads in the
second pane, you can choose the method (endpoint) you would like to use. If
you're not sure which endpoint to use, check out our API Reference for a full
list. If you're following along with our guides, each step will have a link to
the specific endpoint being used.&lt;/p&gt;
&lt;p&gt;Depending on the endpoint, you will be required to fill out some parameters
and/or a request body. When all required parameters have been filled out,
click "Send" and the successful response or error message will appear in the
pane on the right. View previous responses by clicking on the response in the
list above the active response body.&lt;/p&gt;
&lt;h2&gt;__Conclusion&lt;/h2&gt;
&lt;p&gt;The Console eliminates the headache of making authentication requests before
using the OrderCloud API. Use it to dive into your data quickly and make rapid
changes while developing your applications. We're always looking for ways to
improve the experience, so any feedback or suggestions you have as a user of
the platform are greatly appreciated!&lt;/p&gt;</content><category term="getting started"></category></entry><entry><title>Getting Started: Using The Dashboard</title><link href="/getting-started-using-the-dashboard.html" rel="alternate"></link><published>2018-03-19T15:32:44+00:00</published><updated>2018-03-19T15:32:44+00:00</updated><author><name>OrderCloud.io</name></author><id>tag:None,2018-03-19:/getting-started-using-the-dashboard.html</id><summary type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;The OrderCloud.io Dashboard is the central hub for managing your OrderCloud
organizations and applications. This guide is meant to help you understand all
the tools available to you and your team while creating and maintaining
amazing B2B eCommerce solutions.&lt;/p&gt;
&lt;p&gt;You will not be able to view the Dashboard …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;__Overview&lt;/h2&gt;
&lt;p&gt;The OrderCloud.io Dashboard is the central hub for managing your OrderCloud
organizations and applications. This guide is meant to help you understand all
the tools available to you and your team while creating and maintaining
amazing B2B eCommerce solutions.&lt;/p&gt;
&lt;p&gt;You will not be able to view the Dashboard if you haven't created an account.
If you haven't already, register for OrderCloud.io to access your free
account.&lt;/p&gt;
&lt;h2&gt;__Getting to the Dashboard&lt;/h2&gt;
&lt;p&gt;Upon logging in for the first time you will be taken to your account profile
page. Here you can edit your profile information and change your password.&lt;/p&gt;
&lt;p&gt;Below your profile information you should see a &lt;em&gt;"My Seller Organizations"&lt;/em&gt;
tab with a new seller organization called &lt;em&gt;"Default trial company"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/dashboard/navigation.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Clicking on a seller in this list or creating a new organization will redirect
you to what we call the &lt;strong&gt;OrderCloud.io Dashboard&lt;/strong&gt;. Once you're in the
dashboard you are now working within the context of a &lt;em&gt;single&lt;/em&gt; seller
organization.&lt;/p&gt;
&lt;h2&gt;__Seller Organization Settings&lt;/h2&gt;
&lt;p&gt;This is the page you will land on when opening any organization. The view has
two tabs: &lt;strong&gt;Seller Options&lt;/strong&gt; and &lt;strong&gt;Contributors&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;__Seller Options&lt;/h3&gt;
&lt;p&gt;The organization owner has exclusive permission to change the seller options
including updating the organization name, transferring the org to a
contributing developer, or deleting the seller entirely. If you're a
contributor, you can choose to leave the organization from this view.&lt;/p&gt;
&lt;h3&gt;__Contributors&lt;/h3&gt;
&lt;p&gt;Most B2B eCommerce projects require some level of collaboration. By sharing
your organization with other team members on OrderCloud you can all work
together on a single seller. Once a new contributor is added you can refine
their access to your organization by adjusting their &lt;strong&gt;permissions&lt;/strong&gt; &amp;amp; &lt;strong&gt;data
access&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Contributor Permissions&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/dashboard/permissions.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Each permission controls whether or not a given contributor can access
specific dashboard functionality for your seller organization. For example,
you may have one contributor that is responsible for creating webhooks and
integrations and another who is responsible for setting up security profiles
for your end users.&lt;/p&gt;
&lt;h4&gt;Contributor Data Access&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/dashboard/data_access.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Data Access gives you control over which roles (if any) a given contributor
can request when using the OrderCloud API with this seller organization or any
of it's buyer organizations. A contributor with &lt;code&gt;FullAccess&lt;/code&gt; here will have
total control over any of the data under the seller organization. It is
strongly recommended you use a combination of the granular roles that enable
each developer to accomplish their project tasks to avoid unwanted or
unexpected changes to your organization's data. OrderCloud roles are covered
in-depth later in this guide.&lt;/p&gt;
&lt;h2&gt;__Dashboard Features&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/dashboard/features.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The left-hand menu is where you can access each of the dashboard features
available to you for a given seller organization. Some features such as
Message Senders or Integrations will be hidden from this menu if you do not
have permission to access them.&lt;/p&gt;
&lt;p&gt;Beyond these basic navigation items, there is a &lt;em&gt;"Switch Organization"&lt;/em&gt; button
which allows you to quickly change your active seller organization.&lt;/p&gt;
&lt;h2&gt;__Buyer Organizations&lt;/h2&gt;
&lt;p&gt;The OrderCloud Dashboard provides a simple user interface for managing a
seller's buyer organizations. Each buyer organization has a &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;ID&lt;/code&gt;
that are used for interacting with the buyer via the API. A buyer with a
status of &lt;em&gt;"inactive"&lt;/em&gt; is blocked from submitting orders. The Buyer API allows
full control of buyer organizations as well; however, managing the API Clients
of each organization is restricted to the OrderCloud Dashboard.&lt;/p&gt;
&lt;h2&gt;__Applications&lt;/h2&gt;
&lt;p&gt;Seller and Buyer Organizations each have their own set of applications.
Clicking &lt;em&gt;"Seller Applications"&lt;/em&gt; in the left nav will give you a list of
applications that can be used by your organization's Admin Users. Buyer
Applications are visible under each respective Buyer Organization and can be
accessed by the Users under that buyer.&lt;/p&gt;
&lt;h3&gt;Application Settings&lt;/h3&gt;
&lt;p&gt;Opening an individual application will bring you to the &lt;strong&gt;Settings&lt;/strong&gt; tab for
that application. Seller Organization owners and contributors with permission
to administer applications can update application information in this tab and
activate/deactivate the application. Within this tab you’ll find the
following:  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Client ID

&lt;/th&gt;  
&lt;td&gt;

The unique identifier of an application. This field is read-only and used in
all OAuth2.0 workflows. It is a general rule that one front-end application be
associated with a single Client ID or "application".

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Client Secret

&lt;/th&gt;  
&lt;td&gt;

This is an optional elevated level of security. It allows you to require an
additional keyphrase in all authentication requests. It is also used as part
of the Client Credentials Grant Type workflow for anonymous authentication or
back office systems.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Back Office User  
(Seller Applications Only)

&lt;/th&gt;  
&lt;td&gt;

This is for automated systems using a Client Credentials Grant Type. After
following this OAuth2.0 workflow you will appear as this user.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Anonymous Template User  
(Buyer Applications Only)

&lt;/th&gt;  
&lt;td&gt;

This enables anonymous shopping and/or registration on buyer applications. Use
the Client Credentials Grant Type you can authenticate without a password and
you will appear as a temporary user that has the same assignment based
relationships and security as the anonymous template user.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Access Token Duration

&lt;/th&gt;  
&lt;td&gt;

How long (in minutes) an access token will remain valid (max: 600m)

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Refresh Token Duration

&lt;/th&gt;  
&lt;td&gt;

How long (in minutes) you are able to obtain a new Access Token (max: 43200m)

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h3&gt;Active Webhooks&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;"webhooks"&lt;/em&gt; tab is visible to owners and contributors with permission to
administer webhooks. This is where you will enable / disable webhooks for a
given application. Create a webhook once using the Webhooks feature and apply
it to one or many applications using this workflow.&lt;/p&gt;
&lt;h3&gt;Active Integrations&lt;/h3&gt;
&lt;p&gt;The application &lt;em&gt;"integrations"&lt;/em&gt; tab works a lot like the &lt;em&gt;"webhooks"&lt;/em&gt; tab.
Only Seller Organization owners and contributors with permission to administer
integrations will see it. By clicking &lt;em&gt;"add"&lt;/em&gt; you can choose from any of your
configured integration services and apply it to said application.&lt;/p&gt;
&lt;h2&gt;__Security Profiles&lt;/h2&gt;
&lt;p&gt;This feature is available to organization owners and contributors with
permission to administer security. Security Profiles are groupings of roles
that can be later assigned to admin and buyer users using the Security
Profiles API.&lt;/p&gt;
&lt;p&gt;The granular nature of OrderCloud roles enables you to control exactly which
API endpoints and/or data each user can access within your organization
(similar to your contributor's data access!). In general, an &lt;strong&gt;Admin&lt;/strong&gt; role
allows read and write access of a given resource while a &lt;strong&gt;Reader&lt;/strong&gt; role
allows only read access.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/dashboard/security.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It is &lt;strong&gt;strongly discouraged&lt;/strong&gt; and considered a security risk to give your
admin or buyer users the &lt;code&gt;FullAccess&lt;/code&gt; role. While it may be convenient to use
in the early stages of development - it is &lt;strong&gt;always&lt;/strong&gt; better to give end users
a combination of more granular roles that align to the actions they will be
taking in the application.&lt;/p&gt;
&lt;p&gt;If you can't seem to find the role that's right for your users, please
&lt;a href="http://www.ordercloud.io/contact"&gt;contact us&lt;/a&gt; with your request and if deemed
appropriate by our development team, the role will be added to the API.&lt;/p&gt;
&lt;h2&gt;__Extended Properties&lt;/h2&gt;
&lt;p&gt;The Extended Properties (XP) feature was created to improve the performance of
filtered API queries. Instead of automatically indexing any new XP, we ask
developers to define which properties they would like to be indexed
beforehand. Once an XP key is added to this list, relevant Extended Properties
created from that point on will be available for filtering.&lt;/p&gt;
&lt;h2&gt;__Webhooks&lt;/h2&gt;
&lt;p&gt;Webhooks enable user-defined HTTP callbacks for all writeable endpoints in the
OrderCloud API. They can be used to perform follow up tasks such as updating
an external CRM system when a user updates their profile, or send an email
through a 3rd party system when an order is submitted. Webhooks are
fundamentally designed to provide maximum flexibility within the integrated
solution.&lt;/p&gt;
&lt;p&gt;Owners and contributors with permission to administer webhooks can access this
feature. OrderCloud requires standard webhook information:  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Payload URL

&lt;/th&gt;  
&lt;td&gt;

The URL OrderCloud will send data to.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Secret

&lt;/th&gt;  
&lt;td&gt;

OrderCloud will encrypt this secret and pass it through the request headers.

&lt;/td&gt; &lt;/tr&gt;  
&lt;tr&gt;  
&lt;th&gt;

Trigger Events

&lt;/th&gt;  
&lt;td&gt;

The OrderCloud API endpoints that will trigger the webhook event. Webhooks can
only be triggered by endpoints that write to the database (`POST`/`PUT`/
`PATCH`/`DELETE`). The request body sent to the OrderCloud endpoint (if any)
will be passed along to the webhooks that use it.

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;p&gt;Beyond this basic info, we've enhanced our webhooks with some other, more
nuanced options:  &lt;/p&gt;
&lt;table&gt;  
&lt;tr&gt;  
&lt;th&gt;

Elevated Roles

&lt;/th&gt;  
&lt;td&gt;

Normally, OrderCloud will pass along a token that has the same roles as the
original request's access token. Elevated roles are any roles that you need
for your webhook that the original request's access token doesn't have
(usually for subsequent requests that access information the originating user
doesn't have permission to view).

&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;

&lt;h2&gt;__Integrations&lt;/h2&gt;
&lt;p&gt;Organization owners and contributors with permission to administer
integrations can access this feature. Choose a service from the &lt;em&gt;"Available
Services"&lt;/em&gt; tab and click &lt;em&gt;"Add"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;![]({filename}/images/docs-guides/getting-
started/dashboard/available_services.jpg)&lt;/p&gt;
&lt;p&gt;You will be prompted to fill out the information required for OrderCloud to
communicate with the new account.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/docs-guides/getting-started/dashboard/authorize_net.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Any applications that have the configured integration activated will have
access to use it.&lt;/p&gt;
&lt;h2&gt;__Conclusion&lt;/h2&gt;
&lt;p&gt;In summary, everything you need to create and maintain a robust API-driven
application is at your fingertips in the OrderCloud Dashboard. We're always
looking for ways to improve the experience, so any feedback or suggestions you
have as a user of the platform are greatly appreciated.&lt;/p&gt;</content><category term="getting started"></category></entry></feed>